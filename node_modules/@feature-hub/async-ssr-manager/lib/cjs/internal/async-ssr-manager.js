"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncSsrManager = void 0;
const async_hooks_1 = require("async_hooks");
const set_timeout_async_1 = require("./set-timeout-async");
async function renderingTimeout(timeout) {
    await (0, set_timeout_async_1.setTimeoutAsync)(timeout);
    throw Error(`Got rendering timeout after ${timeout} ms.`);
}
class AsyncSsrManager {
    constructor(context, timeout) {
        this.context = context;
        this.timeout = timeout;
        this.asyncOperationsStorage = new async_hooks_1.AsyncLocalStorage();
    }
    async renderUntilCompleted(render) {
        const asyncOperations = new Set();
        return this.asyncOperationsStorage.run(asyncOperations, async () => {
            const renderPromise = this.renderingLoop(render, asyncOperations);
            if (typeof this.timeout !== 'number') {
                this.context.logger.warn('No timeout is configured for the Async SSR Manager. This could lead to unexpectedly long render times or, in the worst case, never resolving render calls!');
                return renderPromise;
            }
            return Promise.race([renderPromise, renderingTimeout(this.timeout)]);
        });
    }
    scheduleRerender(asyncOperation = Promise.resolve()) {
        const asyncOperations = this.asyncOperationsStorage.getStore();
        if (!asyncOperations) {
            throw new Error('Async SSR Manager: Can not call `scheduleRerender` outside of `renderUntilCompleted`.');
        }
        asyncOperations.add(asyncOperation);
    }
    async renderingLoop(render, asyncOperations) {
        let html = await render();
        while (asyncOperations.size > 0) {
            while (asyncOperations.size > 0) {
                // Storing a snapshot of the asynchronous operations and clearing them
                // afterwards, allows that consecutive promises can be added while the
                // current asynchronous operations are running.
                const asyncOperationsSnapshot = Array.from(asyncOperations.values());
                asyncOperations.clear();
                await Promise.all(asyncOperationsSnapshot);
            }
            html = await render();
        }
        return html;
    }
}
exports.AsyncSsrManager = AsyncSsrManager;
//# sourceMappingURL=async-ssr-manager.js.map