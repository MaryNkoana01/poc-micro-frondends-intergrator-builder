{"version":3,"file":"externals-validator.js","sourceRoot":"","sources":["../../src/externals-validator.ts"],"names":[],"mappings":"AAAA,OAAO,eAAe,MAAM,4BAA4B,CAAC;AACzD,OAAO,WAAW,MAAM,wBAAwB,CAAC;AAiBjD;;;GAGG;AACH,MAAM,OAAO,kBAAkB;IAC7B;;;OAGG;IACH,YAAoC,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACtE,KAAK,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,IAAI,MAAM,CAAC,OAAO,CAC1D,iBAAiB,CAClB,EAAE;YACD,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE;gBACjC,MAAM,IAAI,KAAK,CACb,wBAAwB,IAAI,CAAC,SAAS,CACpC,eAAe,CAChB,qBAAqB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,cAAc,CACjE,CAAC;aACH;SACF;IACH,CAAC;IAED;;;;OAIG;IACI,QAAQ,CACb,iBAAoC,EACpC,UAAmB;QAEnB,KAAK,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,IAAI,MAAM,CAAC,OAAO,CACvD,iBAAiB,CAClB,EAAE;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAE7D,IAAI,CAAC,eAAe,EAAE;gBACpB,MAAM,IAAI,KAAK,CACb,2BAA2B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GACrD,UAAU,CAAC,CAAC,CAAC,mBAAmB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,EACjE,mBAAmB,CACpB,CAAC;aACH;YAED,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,YAAY,CAAC,EAAE;gBACnD,MAAM,IAAI,KAAK,CACb,2BAA2B,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IACrD,UAAU;oBACR,CAAC,CAAC,kBAAkB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS;oBACvD,CAAC,CAAC,iBACN,kBAAkB,IAAI,CAAC,SAAS,CAC9B,YAAY,CACb,8CAA8C,IAAI,CAAC,SAAS,CAC3D,eAAe,CAChB,GAAG,CACL,CAAC;aACH;SACF;IACH,CAAC;CACF","sourcesContent":["import semverSatisfies from 'semver/functions/satisfies';\nimport semverValid from 'semver/functions/valid';\n\n/**\n * A map of provided external names as keys and strict semver versions as\n * values.\n */\nexport interface ProvidedExternals {\n  readonly [externalName: string]: string;\n}\n\n/**\n * A map of required external names as keys and semver version ranges as values.\n */\nexport interface RequiredExternals {\n  readonly [externalName: string]: string;\n}\n\n/**\n * The `ExternalsValidator` validates required externals against the provided\n * set of externals it is initilized with.\n */\nexport class ExternalsValidator {\n  /**\n   * @throws Throws an error if the provided externals contain an invalid\n   * version.\n   */\n  public constructor(private readonly providedExternals: ProvidedExternals) {\n    for (const [externalName, providedVersion] of Object.entries(\n      providedExternals,\n    )) {\n      if (!semverValid(providedVersion)) {\n        throw new Error(\n          `The provided version ${JSON.stringify(\n            providedVersion,\n          )} for the external ${JSON.stringify(externalName)} is invalid.`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Validate that the required externals are provided in a compatible version.\n   *\n   * @throws Throws an error if the required externals can't be satisfied.\n   */\n  public validate(\n    requiredExternals: RequiredExternals,\n    consumerId?: string,\n  ): void {\n    for (const [externalName, versionRange] of Object.entries(\n      requiredExternals,\n    )) {\n      const providedVersion = this.providedExternals[externalName];\n\n      if (!providedVersion) {\n        throw new Error(\n          `The external dependency ${JSON.stringify(externalName)}${\n            consumerId ? ` as required by ${JSON.stringify(consumerId)}` : ``\n          } is not provided.`,\n        );\n      }\n\n      if (!semverSatisfies(providedVersion, versionRange)) {\n        throw new Error(\n          `The external dependency ${JSON.stringify(externalName)} ${\n            consumerId\n              ? `as required by ${JSON.stringify(consumerId)} in the`\n              : `in the required`\n          } version range ${JSON.stringify(\n            versionRange,\n          )} is not satisfied. The provided version is ${JSON.stringify(\n            providedVersion,\n          )}.`,\n        );\n      }\n    }\n  }\n}\n"]}