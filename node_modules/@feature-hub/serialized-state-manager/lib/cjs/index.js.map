{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;AAKA,oFAA4E;AAC5E,kFAA2E;AAC3E,oFAA4E;AA6C5E;;;;;GAKG;AACH,SAAgB,4BAA4B,CAC1C,gBAAyB;IAEzB,OAAO;QACL,EAAE,EAAE,6BAA6B;QAEjC,MAAM,EAAE,GAAG,EAAE;YACX,MAAM,sBAAsB,GAAG,IAAI,kDAAsB,EAAE,CAAC;YAC5D,MAAM,sBAAsB,GAAG,IAAI,kDAAsB,EAAE,CAAC;YAE5D,IAAI,gBAAgB,EAAE;gBACpB,sBAAsB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;aAC9D;YAED,OAAO;gBACL,OAAO,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;oBACxB,cAAc,EAAE,IAAI,iDAAsB,CACxC,UAAU,EACV,sBAAsB,EACtB,sBAAsB,CACvB;iBACF,CAAC;aACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAzBD,oEAyBC;AAED;;GAEG;AACU,QAAA,gCAAgC,GAAG,4BAA4B,EAAE,CAAC","sourcesContent":["import {\n  FeatureServiceBinder,\n  FeatureServiceProviderDefinition,\n  SharedFeatureService,\n} from '@feature-hub/core';\nimport {ClientSideStateManager} from './internal/client-side-state-manager';\nimport {SerializedStateManager} from './internal/serialized-state-manager';\nimport {ServerSideStateManager} from './internal/server-side-state-manager';\n\nexport interface SerializedStateManagerV1 {\n  /**\n   * This method is intended to be called by consumers, i.e. Feature Apps and\n   * Feature Services, on the server to register a callback that serializes\n   * their state.\n   *\n   * @param serializeState A callback that returns the consumer state as a\n   * serialized string.\n   */\n  register(serializeState: () => string): void;\n\n  /**\n   * This method is intended to be called by the integrator on the server when\n   * the server-side rendering has been completed, to serialize all consumer\n   * states. The returned string is encoded, so that it can be safely injected\n   * into an HTML document. On the client, this string must be passed unmodified\n   * into [[setSerializedStates]] where it will be decoded again.\n   */\n  serializeStates(): string;\n\n  /**\n   * This method is intended to be called by the integrator on the client to\n   * provide the serialized state to all consumers, i.e. Feature Apps and\n   * Feature Services, (via [[getSerializedState]]) that serialized their\n   * state on the server.\n   *\n   * @param serializedStates The string that was created on the server with\n   * [[serializeStates]].\n   */\n  setSerializedStates(serializedStates: string): void;\n\n  /**\n   * This method is intended to be called by consumers, i.e. Feature Apps and\n   * Feature Services, on the client to retrieve the serialized state that was\n   * created on the server.\n   */\n  getSerializedState(): string | undefined;\n}\n\nexport interface SharedSerializedStateManager extends SharedFeatureService {\n  readonly '1.0.0': FeatureServiceBinder<SerializedStateManagerV1>;\n}\n\n/**\n * On the client this can be called with serialized states to create a\n * Serialized State Manager definition that is already populated with the given\n * serialized states, avoiding the need for the Integrator to call\n * [[SerializedStateManagerV1.setSerializedStates]] after its creation.\n */\nexport function defineSerializedStateManager(\n  serializedStates?: string,\n): FeatureServiceProviderDefinition<SharedSerializedStateManager> {\n  return {\n    id: 's2:serialized-state-manager',\n\n    create: () => {\n      const serverSideStateManager = new ServerSideStateManager();\n      const clientSideStateManager = new ClientSideStateManager();\n\n      if (serializedStates) {\n        clientSideStateManager.setSerializedStates(serializedStates);\n      }\n\n      return {\n        '1.0.0': (consumerId) => ({\n          featureService: new SerializedStateManager(\n            consumerId,\n            serverSideStateManager,\n            clientSideStateManager,\n          ),\n        }),\n      };\n    },\n  };\n}\n\n/**\n * @see [[defineSerializedStateManager]] for further information.\n */\nexport const serializedStateManagerDefinition = defineSerializedStateManager();\n"]}