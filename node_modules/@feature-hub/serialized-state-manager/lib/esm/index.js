import { ClientSideStateManager } from './internal/client-side-state-manager';
import { SerializedStateManager } from './internal/serialized-state-manager';
import { ServerSideStateManager } from './internal/server-side-state-manager';
/**
 * On the client this can be called with serialized states to create a
 * Serialized State Manager definition that is already populated with the given
 * serialized states, avoiding the need for the Integrator to call
 * [[SerializedStateManagerV1.setSerializedStates]] after its creation.
 */
export function defineSerializedStateManager(serializedStates) {
    return {
        id: 's2:serialized-state-manager',
        create: () => {
            const serverSideStateManager = new ServerSideStateManager();
            const clientSideStateManager = new ClientSideStateManager();
            if (serializedStates) {
                clientSideStateManager.setSerializedStates(serializedStates);
            }
            return {
                '1.0.0': (consumerId) => ({
                    featureService: new SerializedStateManager(consumerId, serverSideStateManager, clientSideStateManager),
                }),
            };
        },
    };
}
/**
 * @see [[defineSerializedStateManager]] for further information.
 */
export const serializedStateManagerDefinition = defineSerializedStateManager();
//# sourceMappingURL=index.js.map