{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../src/__tests__/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:no-non-null-assertion\n\nimport {FeatureServiceEnvironment} from '@feature-hub/core';\nimport {\n  SerializedStateManagerV1,\n  defineSerializedStateManager,\n  serializedStateManagerDefinition,\n} from '..';\n\ndescribe('defineSerializedStateManager', () => {\n  let mockEnv: FeatureServiceEnvironment<{}>;\n\n  beforeEach(() => {\n    mockEnv = {featureServices: {}};\n  });\n\n  it('defines an id', () => {\n    expect(serializedStateManagerDefinition.id).toBe(\n      's2:serialized-state-manager',\n    );\n  });\n\n  it('has no dependencies', () => {\n    expect(serializedStateManagerDefinition.dependencies).toBeUndefined();\n\n    expect(\n      serializedStateManagerDefinition.optionalDependencies,\n    ).toBeUndefined();\n  });\n\n  describe('#create', () => {\n    it('creates a shared Feature Service containing version 1.0.0', () => {\n      const sharedSerializedStateManager =\n        serializedStateManagerDefinition.create(mockEnv);\n\n      expect(sharedSerializedStateManager!['1.0.0']).toBeDefined();\n    });\n  });\n\n  describe('SerializedStateManagerV1', () => {\n    let integratorSerializedStateManager: SerializedStateManagerV1;\n    let consumer1SerializedStateManager: SerializedStateManagerV1;\n    let consumer2SerializedStateManager: SerializedStateManagerV1;\n\n    beforeEach(() => {\n      const serializedStateManagerBinder =\n        serializedStateManagerDefinition.create(mockEnv)!['1.0.0'];\n\n      integratorSerializedStateManager =\n        serializedStateManagerBinder('test:integrator').featureService;\n\n      consumer1SerializedStateManager =\n        serializedStateManagerBinder('test:consumer:1').featureService;\n\n      consumer2SerializedStateManager =\n        serializedStateManagerBinder('test:consumer:2').featureService;\n    });\n\n    describe('#serializeStates', () => {\n      describe('when no consumer has called #register', () => {\n        it('returns a stringified empty object', () => {\n          expect(integratorSerializedStateManager.serializeStates()).toBe(\n            encodeURI(JSON.stringify({})),\n          );\n        });\n      });\n\n      describe('when consumers have called #register', () => {\n        beforeEach(() => {\n          consumer1SerializedStateManager.register(() =>\n            JSON.stringify({kind: 'foo'}),\n          );\n\n          consumer2SerializedStateManager.register(() =>\n            JSON.stringify({kind: 'bar'}),\n          );\n        });\n\n        it('returns a stringified and encoded object with all serialized consumer states', () => {\n          expect(integratorSerializedStateManager.serializeStates()).toBe(\n            encodeURI(\n              JSON.stringify({\n                'test:consumer:1': JSON.stringify({kind: 'foo'}),\n                'test:consumer:2': JSON.stringify({kind: 'bar'}),\n              }),\n            ),\n          );\n        });\n      });\n    });\n\n    describe('#getSerializedState', () => {\n      describe('when the integrator has not called #setSerializedStates', () => {\n        it('returns undefined', () => {\n          expect(\n            consumer1SerializedStateManager.getSerializedState(),\n          ).toBeUndefined();\n\n          expect(\n            consumer2SerializedStateManager.getSerializedState(),\n          ).toBeUndefined();\n        });\n      });\n\n      describe('when the integrator has called #setSerializedStates with serialized state for only the first consumer', () => {\n        beforeEach(() => {\n          integratorSerializedStateManager.setSerializedStates(\n            encodeURI(\n              JSON.stringify({\n                'test:consumer:1': JSON.stringify({kind: 'foo'}),\n              }),\n            ),\n          );\n        });\n\n        it('returns the serialized state for the first consumer', () => {\n          expect(consumer1SerializedStateManager.getSerializedState()).toBe(\n            JSON.stringify({kind: 'foo'}),\n          );\n        });\n\n        it('returns undefined for the second consumer', () => {\n          expect(\n            consumer2SerializedStateManager.getSerializedState(),\n          ).toBeUndefined();\n        });\n      });\n\n      describe('when the integrator has passed serialized states into the definition factory function', () => {\n        const serializedStateConsumer1 = JSON.stringify({kind: 'foo'});\n\n        beforeEach(() => {\n          const serializedStateManagerBinder = defineSerializedStateManager(\n            JSON.stringify({'test:consumer:1': serializedStateConsumer1}),\n          ).create(mockEnv)!['1.0.0'];\n\n          consumer1SerializedStateManager =\n            serializedStateManagerBinder('test:consumer:1').featureService;\n\n          consumer2SerializedStateManager =\n            serializedStateManagerBinder('test:consumer:2').featureService;\n        });\n\n        it('returns the serialized state for the first consumer', () => {\n          expect(consumer1SerializedStateManager.getSerializedState()).toBe(\n            serializedStateConsumer1,\n          );\n        });\n\n        it('returns undefined for the second consumer', () => {\n          expect(\n            consumer2SerializedStateManager.getSerializedState(),\n          ).toBeUndefined();\n        });\n      });\n    });\n  });\n});\n"]}