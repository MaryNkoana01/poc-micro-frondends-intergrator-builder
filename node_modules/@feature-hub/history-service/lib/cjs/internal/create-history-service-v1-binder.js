"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHistoryServiceV1Binder = void 0;
const browser_consumer_history_1 = require("./browser-consumer-history");
const create_history_v4_adapter_1 = require("./create-history-v4-adapter");
const static_consumer_history_1 = require("./static-consumer-history");
function createHistoryServiceV1Binder(context, historyMultiplexers, options) {
    const { getHistoryKey } = options;
    return (consumerId, consumerName) => {
        const historyKey = getHistoryKey({ consumerId, consumerName });
        let browserConsumerHistoryDestroy = () => undefined;
        let browserConsumerHistory;
        let staticConsumerHistory;
        const featureService = {
            createBrowserHistory: () => {
                if (browserConsumerHistory) {
                    context.logger.warn(`createBrowserHistory was called multiple times by consumer ${JSON.stringify(consumerId)}. Returning the same history instance as before.`);
                }
                else {
                    const browserConsumerHistoryV5 = new browser_consumer_history_1.BrowserConsumerHistory(context, historyKey, historyMultiplexers.browserHistoryMultiplexer);
                    browserConsumerHistoryDestroy = () => browserConsumerHistoryV5.destroy();
                    browserConsumerHistory = (0, create_history_v4_adapter_1.createHistoryV4Adapter)(context, browserConsumerHistoryV5);
                }
                return browserConsumerHistory;
            },
            createStaticHistory: () => {
                if (staticConsumerHistory) {
                    context.logger.warn(`createStaticHistory was called multiple times by consumer ${JSON.stringify(consumerId)}. Returning the same history instance as before.`);
                }
                else {
                    staticConsumerHistory = (0, create_history_v4_adapter_1.createHistoryV4Adapter)(context, new static_consumer_history_1.StaticConsumerHistory(context, historyKey, historyMultiplexers.staticHistoryMultiplexer));
                }
                return staticConsumerHistory;
            },
            get staticRootLocation() {
                return historyMultiplexers.staticHistoryMultiplexer.rootLocation;
            },
        };
        const unbind = () => {
            browserConsumerHistoryDestroy();
        };
        return { featureService, unbind };
    };
}
exports.createHistoryServiceV1Binder = createHistoryServiceV1Binder;
//# sourceMappingURL=create-history-service-v1-binder.js.map