{"version":3,"file":"history-multiplexer.js","sourceRoot":"","sources":["../../../src/internal/history-multiplexer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as history from 'history';\nimport {\n  ConsumerLocationV3,\n  RootHistory,\n  RootLocation as RootLocationV2,\n  RootLocationDescriptorObject,\n} from '..';\nimport {RootLocationTransformer} from '../create-root-location-transformer';\nimport * as historyV4 from '../history-v4';\nimport {createHistoryPath} from './create-history-path';\nimport {createKey} from './create-key';\n\nexport interface RootLocation extends history.Location {\n  readonly state: Record<string, ConsumerState> | undefined;\n}\n\nexport interface ConsumerState {\n  readonly state: unknown;\n  readonly key: string;\n}\n\nexport class HistoryMultiplexer {\n  public rootHistoryV2: RootHistory;\n\n  public constructor(\n    public readonly rootHistory: history.History,\n    public readonly rootLocationTransformer: RootLocationTransformer,\n  ) {\n    this.rootHistoryV2 = {\n      get length(): number {\n        try {\n          return window.history.length;\n        } catch {\n          return 1;\n        }\n      },\n\n      get location(): RootLocationV2 {\n        return rootHistory.location as RootLocationV2;\n      },\n\n      push(location: RootLocationDescriptorObject): void {\n        const {pathname, search, hash, state} = location;\n\n        rootHistory.push({pathname, search, hash}, state);\n      },\n\n      replace(location: RootLocationDescriptorObject): void {\n        const {pathname, search, hash, state} = location;\n\n        rootHistory.replace({pathname, search, hash}, state);\n      },\n\n      createHref(location: RootLocationDescriptorObject): string {\n        return rootHistory.createHref(location);\n      },\n\n      listen(\n        listener: historyV4.LocationListener,\n      ): historyV4.UnregisterCallback {\n        return rootHistory.listen(({location, action}) =>\n          listener(location, action),\n        );\n      },\n    };\n  }\n\n  public get rootLocation(): RootLocation {\n    return this.rootHistory.location as RootLocation;\n  }\n\n  public push(historyKey: string, consumerLocation: history.Location): void {\n    const {pathname, search, hash, state} = this.createRootLocation(\n      historyKey,\n      consumerLocation,\n    );\n\n    this.rootHistory.push({pathname, search, hash}, state);\n  }\n\n  public replace(historyKey: string, consumerLocation: history.Location): void {\n    const {pathname, search, hash, state} = this.createRootLocation(\n      historyKey,\n      consumerLocation,\n    );\n\n    this.rootHistory.replace({pathname, search, hash}, state);\n  }\n\n  public createHref(\n    historyKey: string,\n    consumerLocation: history.Path,\n  ): string {\n    const {pathname, search, hash} = this.createRootLocation(\n      historyKey,\n      consumerLocation,\n    );\n\n    return this.rootHistory.createHref({pathname, search, hash});\n  }\n\n  public getConsumerLocation(historyKey: string): history.Location {\n    const consumerPath =\n      this.rootLocationTransformer.getConsumerPathFromRootLocation(\n        this.rootLocation,\n        historyKey,\n      ) || '/';\n\n    const {state, key} = this.rootLocation.state?.[historyKey] || {\n      state: undefined,\n      key: createKey(),\n    };\n\n    return {\n      ...createHistoryPath(history.parsePath(consumerPath)),\n      state,\n      key,\n    };\n  }\n\n  public listenForRootLocationChange(\n    listener: (action: history.Action) => void,\n  ): () => void {\n    return this.rootHistory.listen(({action}) => {\n      listener(action);\n    });\n  }\n\n  public createNewRootLocationForMultipleConsumers(\n    ...consumerLocations: ConsumerLocationV3[]\n  ): Omit<RootLocation, 'key'> {\n    let newRootLocation: Partial<history.Path> = {pathname: '/'};\n\n    if (\n      this.rootLocationTransformer.createNewRootLocationForMultipleConsumers\n    ) {\n      newRootLocation =\n        this.rootLocationTransformer.createNewRootLocationForMultipleConsumers(\n          ...consumerLocations,\n        );\n    } else {\n      for (const consumerLocation of consumerLocations) {\n        newRootLocation = this.rootLocationTransformer.createRootLocation(\n          newRootLocation,\n          consumerLocation.location,\n          consumerLocation.historyKey,\n        );\n      }\n    }\n\n    const consumerStates: Record<string, ConsumerState> = {};\n\n    for (const {historyKey, state} of consumerLocations) {\n      consumerStates[historyKey] = {state, key: createKey()};\n    }\n\n    return {...createHistoryPath(newRootLocation), state: consumerStates};\n  }\n\n  private createRootLocation(\n    historyKey: string,\n    consumerLocation: Partial<history.Location>,\n  ): Omit<RootLocation, 'key'> {\n    const newRootLocation = this.rootLocationTransformer.createRootLocation(\n      this.rootLocation,\n      consumerLocation,\n      historyKey,\n    );\n\n    const {state, key = createKey()} = consumerLocation;\n\n    return {\n      ...createHistoryPath(newRootLocation),\n      state: {...this.rootLocation.state, [historyKey]: {state, key}},\n    };\n  }\n}\n"]}