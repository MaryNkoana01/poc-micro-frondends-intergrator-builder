"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHistoryMultiplexers = void 0;
const history = __importStar(require("history"));
const history_multiplexer_1 = require("./history-multiplexer");
function createHistoryMultiplexers(context, rootLocationTransformer) {
    let browserHistoryMultiplexer;
    let staticHistoryMultiplexer;
    return {
        get browserHistoryMultiplexer() {
            if (!browserHistoryMultiplexer) {
                browserHistoryMultiplexer = new history_multiplexer_1.HistoryMultiplexer(history.createBrowserHistory(), rootLocationTransformer);
            }
            return browserHistoryMultiplexer;
        },
        get staticHistoryMultiplexer() {
            if (!staticHistoryMultiplexer) {
                if (!context.serverRequest) {
                    throw new Error('Static history can not be created without a server request.');
                }
                staticHistoryMultiplexer = new history_multiplexer_1.HistoryMultiplexer(history.createMemoryHistory({
                    initialEntries: [createPathFromUrl(context.serverRequest.url)],
                    initialIndex: 0,
                }), rootLocationTransformer);
            }
            return staticHistoryMultiplexer;
        },
    };
}
exports.createHistoryMultiplexers = createHistoryMultiplexers;
function createPathFromUrl(url) {
    if (isAbsolute(url)) {
        const { pathname, search } = new URL(url);
        return { pathname, search };
    }
    return history.parsePath(url);
}
function isAbsolute(url) {
    return /^https?:\/\//.test(url);
}
//# sourceMappingURL=create-history-multiplexers.js.map