"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryMultiplexer = void 0;
const history = __importStar(require("history"));
const create_history_path_1 = require("./create-history-path");
const create_key_1 = require("./create-key");
class HistoryMultiplexer {
    constructor(rootHistory, rootLocationTransformer) {
        this.rootHistory = rootHistory;
        this.rootLocationTransformer = rootLocationTransformer;
        this.rootHistoryV2 = {
            get length() {
                try {
                    return window.history.length;
                }
                catch (_a) {
                    return 1;
                }
            },
            get location() {
                return rootHistory.location;
            },
            push(location) {
                const { pathname, search, hash, state } = location;
                rootHistory.push({ pathname, search, hash }, state);
            },
            replace(location) {
                const { pathname, search, hash, state } = location;
                rootHistory.replace({ pathname, search, hash }, state);
            },
            createHref(location) {
                return rootHistory.createHref(location);
            },
            listen(listener) {
                return rootHistory.listen(({ location, action }) => listener(location, action));
            },
        };
    }
    get rootLocation() {
        return this.rootHistory.location;
    }
    push(historyKey, consumerLocation) {
        const { pathname, search, hash, state } = this.createRootLocation(historyKey, consumerLocation);
        this.rootHistory.push({ pathname, search, hash }, state);
    }
    replace(historyKey, consumerLocation) {
        const { pathname, search, hash, state } = this.createRootLocation(historyKey, consumerLocation);
        this.rootHistory.replace({ pathname, search, hash }, state);
    }
    createHref(historyKey, consumerLocation) {
        const { pathname, search, hash } = this.createRootLocation(historyKey, consumerLocation);
        return this.rootHistory.createHref({ pathname, search, hash });
    }
    getConsumerLocation(historyKey) {
        var _a;
        const consumerPath = this.rootLocationTransformer.getConsumerPathFromRootLocation(this.rootLocation, historyKey) || '/';
        const { state, key } = ((_a = this.rootLocation.state) === null || _a === void 0 ? void 0 : _a[historyKey]) || {
            state: undefined,
            key: (0, create_key_1.createKey)(),
        };
        return Object.assign(Object.assign({}, (0, create_history_path_1.createHistoryPath)(history.parsePath(consumerPath))), { state,
            key });
    }
    listenForRootLocationChange(listener) {
        return this.rootHistory.listen(({ action }) => {
            listener(action);
        });
    }
    createNewRootLocationForMultipleConsumers(...consumerLocations) {
        let newRootLocation = { pathname: '/' };
        if (this.rootLocationTransformer.createNewRootLocationForMultipleConsumers) {
            newRootLocation =
                this.rootLocationTransformer.createNewRootLocationForMultipleConsumers(...consumerLocations);
        }
        else {
            for (const consumerLocation of consumerLocations) {
                newRootLocation = this.rootLocationTransformer.createRootLocation(newRootLocation, consumerLocation.location, consumerLocation.historyKey);
            }
        }
        const consumerStates = {};
        for (const { historyKey, state } of consumerLocations) {
            consumerStates[historyKey] = { state, key: (0, create_key_1.createKey)() };
        }
        return Object.assign(Object.assign({}, (0, create_history_path_1.createHistoryPath)(newRootLocation)), { state: consumerStates });
    }
    createRootLocation(historyKey, consumerLocation) {
        const newRootLocation = this.rootLocationTransformer.createRootLocation(this.rootLocation, consumerLocation, historyKey);
        const { state, key = (0, create_key_1.createKey)() } = consumerLocation;
        return Object.assign(Object.assign({}, (0, create_history_path_1.createHistoryPath)(newRootLocation)), { state: Object.assign(Object.assign({}, this.rootLocation.state), { [historyKey]: { state, key } }) });
    }
}
exports.HistoryMultiplexer = HistoryMultiplexer;
//# sourceMappingURL=history-multiplexer.js.map