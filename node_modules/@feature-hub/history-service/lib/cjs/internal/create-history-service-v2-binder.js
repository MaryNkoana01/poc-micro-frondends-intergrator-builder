"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHistoryServiceV2Binder = void 0;
const browser_consumer_history_1 = require("./browser-consumer-history");
const create_history_v4_adapter_1 = require("./create-history-v4-adapter");
const static_consumer_history_1 = require("./static-consumer-history");
function createHistoryServiceV2(context, historyKey, consumerHistory, historyMultiplexer) {
    return {
        historyKey,
        history: (0, create_history_v4_adapter_1.createHistoryV4Adapter)(context, consumerHistory),
        rootHistory: historyMultiplexer.rootHistoryV2,
        createNewRootLocationForMultipleConsumers: (...consumerLocations) => historyMultiplexer.createNewRootLocationForMultipleConsumers(...consumerLocations.map(({ historyKey: otherHistoryKey, location: { pathname, search, hash, state }, }) => ({
            historyKey: otherHistoryKey,
            location: { pathname, search, hash },
            state,
        }))),
    };
}
function createBrowserHistoryServiceV2Binding(context, historyMultiplexers, historyKey) {
    const consumerHistory = new browser_consumer_history_1.BrowserConsumerHistory(context, historyKey, historyMultiplexers.browserHistoryMultiplexer);
    return {
        featureService: createHistoryServiceV2(context, historyKey, consumerHistory, historyMultiplexers.browserHistoryMultiplexer),
        unbind: () => {
            consumerHistory.destroy();
        },
    };
}
function createStaticHistoryServiceV2Binding(context, historyMultiplexers, historyKey) {
    const consumerHistory = new static_consumer_history_1.StaticConsumerHistory(context, historyKey, historyMultiplexers.staticHistoryMultiplexer);
    return {
        featureService: createHistoryServiceV2(context, historyKey, consumerHistory, historyMultiplexers.staticHistoryMultiplexer),
    };
}
function createHistoryServiceV2Binder(context, historyMultiplexers, options) {
    const { mode, getHistoryKey } = options;
    return (consumerId, consumerName) => {
        const historyKey = getHistoryKey({ consumerId, consumerName });
        return mode === 'browser'
            ? createBrowserHistoryServiceV2Binding(context, historyMultiplexers, historyKey)
            : createStaticHistoryServiceV2Binding(context, historyMultiplexers, historyKey);
    };
}
exports.createHistoryServiceV2Binder = createHistoryServiceV2Binder;
//# sourceMappingURL=create-history-service-v2-binder.js.map