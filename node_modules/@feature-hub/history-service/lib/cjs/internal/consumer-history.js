"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsumerHistory = void 0;
const history = __importStar(require("history"));
const create_history_path_1 = require("./create-history-path");
const create_key_1 = require("./create-key");
class ConsumerHistory {
    constructor(context, historyKey, historyMultiplexer) {
        this.context = context;
        this.historyKey = historyKey;
        this.historyMultiplexer = historyMultiplexer;
        this.action = history.Action.Pop;
        const { pathname, search, hash, state, key } = historyMultiplexer.getConsumerLocation(historyKey);
        this.location = {
            pathname: pathname.startsWith('/') ? pathname : `/${pathname}`,
            search,
            hash,
            state,
            key,
        };
        /**
         * The methods of `history.History` must be bound explicitly, because
         * components like `Link` from the `react-router-dom` package deconstruct
         * methods like `push` and `replace` from the `history`.
         */
        this.push = this.push.bind(this);
        this.replace = this.replace.bind(this);
        this.go = this.go.bind(this);
        this.back = this.back.bind(this);
        this.forward = this.forward.bind(this);
        this.block = this.block.bind(this);
        this.createHref = this.createHref.bind(this);
    }
    push(to, state) {
        this.location = this.createLocation(to, state);
        this.historyMultiplexer.push(this.historyKey, this.location);
        this.action = history.Action.Push;
    }
    replace(to, state) {
        this.location = this.createLocation(to, state);
        this.historyMultiplexer.replace(this.historyKey, this.location);
        this.action = history.Action.Replace;
    }
    go() {
        this.context.logger.warn('history.go() is not supported.');
    }
    back() {
        this.context.logger.warn('history.back() is not supported.');
    }
    forward() {
        this.context.logger.warn('history.forward() is not supported.');
    }
    block() {
        this.context.logger.warn('history.block() is not supported.');
        return () => undefined;
    }
    createHref(to) {
        return this.historyMultiplexer.createHref(this.historyKey, (0, create_history_path_1.createHistoryPath)(to, history.createPath(this.location)));
    }
    createLocation(to, state) {
        return Object.assign(Object.assign({}, (0, create_history_path_1.createHistoryPath)(to, this.location.pathname)), { state, key: (0, create_key_1.createKey)() });
    }
}
exports.ConsumerHistory = ConsumerHistory;
//# sourceMappingURL=consumer-history.js.map