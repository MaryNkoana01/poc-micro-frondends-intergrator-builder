"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserConsumerHistory = void 0;
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const history = __importStar(require("history"));
const consumer_history_1 = require("./consumer-history");
class BrowserConsumerHistory extends consumer_history_1.ConsumerHistory {
    constructor(context, historyKey, historyMultiplexer) {
        super(context, historyKey, historyMultiplexer);
        this.listeners = new Set();
        this.unregisterCallbacks = [];
        this.browserUnregister = historyMultiplexer.listenForRootLocationChange((action) => {
            this.handleRootLocationChange(action);
        });
        this.listen = this.listen.bind(this);
        this.push = this.push.bind(this);
        this.replace = this.replace.bind(this);
    }
    destroy() {
        this.browserUnregister();
        this.unregisterCallbacks.forEach((unregister) => unregister());
    }
    listen(listener) {
        this.listeners.add(listener);
        const unregister = () => {
            this.listeners.delete(listener);
        };
        this.unregisterCallbacks.push(unregister);
        return unregister;
    }
    push(to, state) {
        super.push(to, state);
        this.notifyListeners();
    }
    replace(to, state) {
        super.replace(to, state);
        this.notifyListeners();
    }
    notifyListeners() {
        for (const listener of this.listeners) {
            listener({ location: this.location, action: this.action });
        }
    }
    handleRootLocationChange(action) {
        const location = this.historyMultiplexer.getConsumerLocation(this.historyKey);
        if (this.matches(location)) {
            return;
        }
        this.location = location;
        this.action = action;
        this.notifyListeners();
    }
    matches(location) {
        if (history.createPath(location) !== history.createPath(this.location)) {
            return false;
        }
        return (0, fast_deep_equal_1.default)(location.state, this.location.state);
    }
}
exports.BrowserConsumerHistory = BrowserConsumerHistory;
//# sourceMappingURL=browser-consumer-history.js.map