{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAWA,wFAAiF;AACjF,kGAAyF;AACzF,kGAAyF;AACzF,kGAGqD;AACrD,gFAA+E;AAE/E,qEAAmD;AAyHnD,SAAgB,oBAAoB,CAClC,uBAAgD,EAChD,UAA2C,EAAE;IAK7C,MAAM,EAAC,IAAI,GAAG,SAAS,EAAE,aAAa,GAAG,CAAC,EAAC,UAAU,EAAC,EAAE,EAAE,CAAC,UAAU,EAAC,GACpE,OAAO,CAAC;IAEV,OAAO;QACL,EAAE,EAAE,YAAY;QAEhB,oBAAoB,EAAE;YACpB,eAAe,EAAE;gBACf,WAAW,EAAE,QAAQ;gBACrB,mBAAmB,EAAE,QAAQ;aAC9B;SACF;QAED,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE;YACd,MAAM,OAAO,GAAG,IAAA,qDAA2B,EAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAEjE,MAAM,mBAAmB,GAAG,IAAA,uDAAyB,EACnD,OAAO,EACP,uBAAuB,CACxB,CAAC;YAEF,OAAO;gBACL,OAAO,EAAE,IAAA,+DAA4B,EAAC,OAAO,EAAE,mBAAmB,EAAE;oBAClE,aAAa;iBACd,CAAC;gBAEF,OAAO,EAAE,IAAA,+DAA4B,EAAC,OAAO,EAAE,mBAAmB,EAAE;oBAClE,IAAI;oBACJ,aAAa;iBACd,CAAC;gBAEF,OAAO,EAAE,IAAA,+DAA4B,EAAC,OAAO,EAAE,mBAAmB,EAAE;oBAClE,IAAI;oBACJ,aAAa;iBACd,CAAC;aACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AA7CD,oDA6CC","sourcesContent":["import {\n  FeatureServiceBinder,\n  FeatureServiceProviderDefinition,\n  FeatureServices,\n  SharedFeatureService,\n} from '@feature-hub/core';\nimport {Logger} from '@feature-hub/logger';\nimport {ServerRequestV1} from '@feature-hub/server-request';\nimport * as history from 'history';\nimport {RootLocationTransformer} from './create-root-location-transformer';\nimport * as historyV4 from './history-v4';\nimport {createHistoryMultiplexers} from './internal/create-history-multiplexers';\nimport {createHistoryServiceV1Binder} from './internal/create-history-service-v1-binder';\nimport {createHistoryServiceV2Binder} from './internal/create-history-service-v2-binder';\nimport {\n  GetHistoryKeyOptions,\n  createHistoryServiceV3Binder,\n} from './internal/create-history-service-v3-binder';\nimport {createHistoryServiceContext} from './internal/history-service-context';\n\nexport * from './create-root-location-transformer';\n\nexport interface RootHistory {\n  readonly length: number;\n  readonly location: RootLocation;\n\n  push(location: RootLocationDescriptorObject): void;\n  replace(location: RootLocationDescriptorObject): void;\n  createHref(location: RootLocationDescriptorObject): string;\n  listen(listener: historyV4.LocationListener): historyV4.UnregisterCallback;\n}\n\nexport type RootLocation = historyV4.Location<ConsumerHistoryStates>;\n\nexport type RootLocationDescriptorObject =\n  historyV4.LocationDescriptorObject<ConsumerHistoryStates>;\n\nexport interface ConsumerHistoryStates {\n  readonly [historyKey: string]: unknown;\n}\n\nexport interface ConsumerLocation {\n  readonly historyKey: string;\n  readonly location: historyV4.LocationDescriptorObject;\n}\n\nexport interface HistoryServiceV1 {\n  readonly staticRootLocation: historyV4.Location;\n\n  createBrowserHistory(): historyV4.History;\n  createStaticHistory(): historyV4.History;\n}\n\nexport interface HistoryServiceV2 {\n  /**\n   * The history key that has been assigned to the consumer. It can be used to\n   * create a [[ConsumerLocation]].\n   */\n  readonly historyKey: string;\n\n  /**\n   * The consumer's own history. When location changes are applied to this\n   * history, no other consumer histories are affected.\n   */\n  readonly history: historyV4.History;\n\n  /**\n   * Allows special consumers, like overarching navigation services, to change\n   * the full root location. To create a new root location, it is recommended to\n   * use the `createNewRootLocationForMultipleConsumers` method.\n   */\n  readonly rootHistory: RootHistory;\n\n  /**\n   * Creates a new root location from multiple consumer locations. The returned\n   * location can be used for the `push`, `replace`, and `createHref` methods of\n   * the `rootHistory`.\n   */\n  createNewRootLocationForMultipleConsumers(\n    ...consumerLocations: ConsumerLocation[]\n  ): RootLocationDescriptorObject;\n}\n\nexport interface HistoryServiceV3 {\n  /**\n   * The history key that has been assigned to the consumer. It can be used to\n   * create a [[ConsumerLocation]].\n   */\n  readonly historyKey: string;\n\n  /**\n   * The consumer's own history. When location changes are applied to this\n   * history, no other consumer histories are affected.\n   */\n  readonly history: history.History;\n\n  /**\n   * Allows special consumers, like overarching navigation services, to change\n   * the full root location. To create a new root location, it is recommended to\n   * use the `createNewRootLocationForMultipleConsumers` method.\n   */\n  readonly rootHistory: history.History;\n\n  /**\n   * Creates a new root location from multiple consumer locations. The returned\n   * location can be used for the `push`, `replace`, and `createHref` methods of\n   * the `rootHistory`. Important: For `push` and `replace` calls make sure to\n   * pass the returned `state` property as a second argument, e.g.:\n   * ```\n   *  const {state, ...to} = historyService.createNewRootLocationForMultipleConsumers({...});\n   *\n   *  historyService.rootHistory.push(to, state);\n   * ```\n   */\n  createNewRootLocationForMultipleConsumers(\n    ...consumerLocations: ConsumerLocationV3[]\n  ): Omit<history.Location, 'key'>;\n}\n\nexport interface ConsumerLocationV3 {\n  readonly historyKey: string;\n  readonly location: Partial<history.Path>;\n  readonly state?: unknown;\n}\n\nexport interface SharedHistoryService extends SharedFeatureService {\n  readonly '1.0.0': FeatureServiceBinder<HistoryServiceV1>;\n  readonly '2.0.0': FeatureServiceBinder<HistoryServiceV2>;\n  readonly '3.0.0': FeatureServiceBinder<HistoryServiceV3>;\n}\n\nexport interface HistoryServiceDependencies extends FeatureServices {\n  readonly 's2:logger'?: Logger;\n  readonly 's2:server-request'?: ServerRequestV1;\n}\n\nexport interface HistoryServiceDefinitionOptions {\n  readonly mode?: 'browser' | 'static';\n  readonly getHistoryKey?: (options: GetHistoryKeyOptions) => string;\n}\n\nexport function defineHistoryService(\n  rootLocationTransformer: RootLocationTransformer,\n  options: HistoryServiceDefinitionOptions = {},\n): FeatureServiceProviderDefinition<\n  SharedHistoryService,\n  HistoryServiceDependencies\n> {\n  const {mode = 'browser', getHistoryKey = ({consumerId}) => consumerId} =\n    options;\n\n  return {\n    id: 's2:history',\n\n    optionalDependencies: {\n      featureServices: {\n        's2:logger': '^1.0.0',\n        's2:server-request': '^1.0.0',\n      },\n    },\n\n    create: (env) => {\n      const context = createHistoryServiceContext(env.featureServices);\n\n      const historyMultiplexers = createHistoryMultiplexers(\n        context,\n        rootLocationTransformer,\n      );\n\n      return {\n        '1.0.0': createHistoryServiceV1Binder(context, historyMultiplexers, {\n          getHistoryKey,\n        }),\n\n        '2.0.0': createHistoryServiceV2Binder(context, historyMultiplexers, {\n          mode,\n          getHistoryKey,\n        }),\n\n        '3.0.0': createHistoryServiceV3Binder(context, historyMultiplexers, {\n          mode,\n          getHistoryKey,\n        }),\n      };\n    },\n  };\n}\n"]}