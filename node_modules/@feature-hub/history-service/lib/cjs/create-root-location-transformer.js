"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRootLocationTransformer = exports.createRootLocationForOtherConsumer = exports.createRootLocationForPrimaryConsumer = exports.serializeSearchParams = exports.createSearchParams = exports.getConsumerPath = exports.addConsumerPath = void 0;
const history = __importStar(require("history"));
const url_search_params_1 = require("./internal/url-search-params");
function encodeConsumerPaths(consumerPaths) {
    return JSON.stringify(consumerPaths);
}
function decodeConsumerPaths(encodedConsumerPaths) {
    return JSON.parse(encodedConsumerPaths);
}
function addConsumerPath(encodedConsumerPaths, historyKey, path) {
    return encodeConsumerPaths(Object.assign(Object.assign({}, decodeConsumerPaths(encodedConsumerPaths || '{}')), { [historyKey]: path }));
}
exports.addConsumerPath = addConsumerPath;
function getConsumerPath(encodedConsumerPaths, historyKey) {
    return decodeConsumerPaths(encodedConsumerPaths)[historyKey];
}
exports.getConsumerPath = getConsumerPath;
function createSearchParams(location) {
    return new url_search_params_1.URLSearchParams(location.search);
}
exports.createSearchParams = createSearchParams;
function serializeSearchParams(searchParams) {
    return `?${searchParams.toString()}`;
}
exports.serializeSearchParams = serializeSearchParams;
function createRootLocationForPrimaryConsumer(currentRootLocation, primaryConsumerLocation, consumerPathsQueryParamName) {
    const allSearchParams = createSearchParams(currentRootLocation);
    const newSearchParams = createSearchParams(primaryConsumerLocation);
    if (newSearchParams.has(consumerPathsQueryParamName)) {
        throw new Error(`Primary consumer tried to set query parameter ${JSON.stringify(consumerPathsQueryParamName)} which is reserverd for consumer paths.`);
    }
    const consumerPaths = allSearchParams.get(consumerPathsQueryParamName);
    let search;
    if (consumerPaths) {
        newSearchParams.set(consumerPathsQueryParamName, consumerPaths);
        search = serializeSearchParams(newSearchParams);
    }
    else {
        search = primaryConsumerLocation.search;
    }
    const { pathname, hash } = primaryConsumerLocation;
    return { pathname, search, hash };
}
exports.createRootLocationForPrimaryConsumer = createRootLocationForPrimaryConsumer;
function createRootLocationForOtherConsumer(currentRootLocation, consumerLocation, historyKey, consumerPathsQueryParamName) {
    const allSearchParams = createSearchParams(currentRootLocation);
    const consumerPaths = allSearchParams.get(consumerPathsQueryParamName);
    const newConsumerPaths = addConsumerPath(consumerPaths, historyKey, history.createPath(consumerLocation));
    allSearchParams.set(consumerPathsQueryParamName, newConsumerPaths);
    return {
        pathname: currentRootLocation.pathname,
        search: serializeSearchParams(allSearchParams),
        hash: currentRootLocation.hash,
    };
}
exports.createRootLocationForOtherConsumer = createRootLocationForOtherConsumer;
function createRootLocationTransformer(options) {
    return {
        getConsumerPathFromRootLocation: (rootLocation, historyKey) => {
            const { consumerPathsQueryParamName, primaryConsumerHistoryKey } = options;
            const isPrimaryConsumer = historyKey === primaryConsumerHistoryKey;
            const searchParams = createSearchParams(rootLocation);
            if (isPrimaryConsumer) {
                searchParams.delete(consumerPathsQueryParamName);
                const { pathname, hash } = rootLocation;
                const search = serializeSearchParams(searchParams);
                return history.createPath({ pathname, search, hash });
            }
            const consumerPaths = searchParams.get(consumerPathsQueryParamName);
            if (!consumerPaths) {
                return undefined;
            }
            return getConsumerPath(consumerPaths, historyKey);
        },
        createRootLocation: (currentRootLocation, consumerLocation, historyKey) => {
            const { consumerPathsQueryParamName, primaryConsumerHistoryKey } = options;
            const isPrimaryConsumer = historyKey === primaryConsumerHistoryKey;
            if (isPrimaryConsumer) {
                return createRootLocationForPrimaryConsumer(currentRootLocation, consumerLocation, consumerPathsQueryParamName);
            }
            return createRootLocationForOtherConsumer(currentRootLocation, consumerLocation, historyKey, consumerPathsQueryParamName);
        },
    };
}
exports.createRootLocationTransformer = createRootLocationTransformer;
//# sourceMappingURL=create-root-location-transformer.js.map