import * as history from 'history';
import { ConsumerLocationV3 } from '.';
export interface RootLocationOptions {
    readonly consumerPathsQueryParamName: string;
    readonly primaryConsumerHistoryKey?: string;
}
export interface RootLocationTransformer {
    getConsumerPathFromRootLocation(rootLocation: Partial<history.Location>, historyKey: string): string | undefined;
    createRootLocation(currentRootLocation: Partial<history.Location>, consumerLocation: Partial<history.Location>, historyKey: string): Partial<history.Path>;
    createNewRootLocationForMultipleConsumers?(...consumerLocations: ConsumerLocationV3[]): Partial<history.Path>;
}
export interface ConsumerPaths {
    readonly [historyKey: string]: string;
}
export declare function addConsumerPath(encodedConsumerPaths: string | null, historyKey: string, path: string): string;
export declare function getConsumerPath(encodedConsumerPaths: string, historyKey: string): string;
export declare function createSearchParams(location: Partial<history.Path>): URLSearchParams;
export declare function serializeSearchParams(searchParams: URLSearchParams): string;
export declare function createRootLocationForPrimaryConsumer(currentRootLocation: Partial<history.Location>, primaryConsumerLocation: Partial<history.Path>, consumerPathsQueryParamName: string): Partial<history.Path>;
export declare function createRootLocationForOtherConsumer(currentRootLocation: Partial<history.Location>, consumerLocation: Partial<history.Path>, historyKey: string, consumerPathsQueryParamName: string): Partial<history.Path>;
export declare function createRootLocationTransformer(options: RootLocationOptions): RootLocationTransformer;
//# sourceMappingURL=create-root-location-transformer.d.ts.map