import * as history from 'history';
import { ConsumerLocationV3, RootHistory } from '..';
import { RootLocationTransformer } from '../create-root-location-transformer';
export interface RootLocation extends history.Location {
    readonly state: Record<string, ConsumerState> | undefined;
}
export interface ConsumerState {
    readonly state: unknown;
    readonly key: string;
}
export declare class HistoryMultiplexer {
    readonly rootHistory: history.History;
    readonly rootLocationTransformer: RootLocationTransformer;
    rootHistoryV2: RootHistory;
    constructor(rootHistory: history.History, rootLocationTransformer: RootLocationTransformer);
    get rootLocation(): RootLocation;
    push(historyKey: string, consumerLocation: history.Location): void;
    replace(historyKey: string, consumerLocation: history.Location): void;
    createHref(historyKey: string, consumerLocation: history.Path): string;
    getConsumerLocation(historyKey: string): history.Location;
    listenForRootLocationChange(listener: (action: history.Action) => void): () => void;
    createNewRootLocationForMultipleConsumers(...consumerLocations: ConsumerLocationV3[]): Omit<RootLocation, 'key'>;
    private createRootLocation;
}
//# sourceMappingURL=history-multiplexer.d.ts.map