import * as history from 'history';
import { createHistoryPath } from './create-history-path';
import { createKey } from './create-key';
export class ConsumerHistory {
    constructor(context, historyKey, historyMultiplexer) {
        this.context = context;
        this.historyKey = historyKey;
        this.historyMultiplexer = historyMultiplexer;
        this.action = history.Action.Pop;
        const { pathname, search, hash, state, key } = historyMultiplexer.getConsumerLocation(historyKey);
        this.location = {
            pathname: pathname.startsWith('/') ? pathname : `/${pathname}`,
            search,
            hash,
            state,
            key,
        };
        /**
         * The methods of `history.History` must be bound explicitly, because
         * components like `Link` from the `react-router-dom` package deconstruct
         * methods like `push` and `replace` from the `history`.
         */
        this.push = this.push.bind(this);
        this.replace = this.replace.bind(this);
        this.go = this.go.bind(this);
        this.back = this.back.bind(this);
        this.forward = this.forward.bind(this);
        this.block = this.block.bind(this);
        this.createHref = this.createHref.bind(this);
    }
    push(to, state) {
        this.location = this.createLocation(to, state);
        this.historyMultiplexer.push(this.historyKey, this.location);
        this.action = history.Action.Push;
    }
    replace(to, state) {
        this.location = this.createLocation(to, state);
        this.historyMultiplexer.replace(this.historyKey, this.location);
        this.action = history.Action.Replace;
    }
    go() {
        this.context.logger.warn('history.go() is not supported.');
    }
    back() {
        this.context.logger.warn('history.back() is not supported.');
    }
    forward() {
        this.context.logger.warn('history.forward() is not supported.');
    }
    block() {
        this.context.logger.warn('history.block() is not supported.');
        return () => undefined;
    }
    createHref(to) {
        return this.historyMultiplexer.createHref(this.historyKey, createHistoryPath(to, history.createPath(this.location)));
    }
    createLocation(to, state) {
        return Object.assign(Object.assign({}, createHistoryPath(to, this.location.pathname)), { state, key: createKey() });
    }
}
//# sourceMappingURL=consumer-history.js.map