import equal from 'fast-deep-equal';
import * as history from 'history';
import { ConsumerHistory } from './consumer-history';
export class BrowserConsumerHistory extends ConsumerHistory {
    constructor(context, historyKey, historyMultiplexer) {
        super(context, historyKey, historyMultiplexer);
        this.listeners = new Set();
        this.unregisterCallbacks = [];
        this.browserUnregister = historyMultiplexer.listenForRootLocationChange((action) => {
            this.handleRootLocationChange(action);
        });
        this.listen = this.listen.bind(this);
        this.push = this.push.bind(this);
        this.replace = this.replace.bind(this);
    }
    destroy() {
        this.browserUnregister();
        this.unregisterCallbacks.forEach((unregister) => unregister());
    }
    listen(listener) {
        this.listeners.add(listener);
        const unregister = () => {
            this.listeners.delete(listener);
        };
        this.unregisterCallbacks.push(unregister);
        return unregister;
    }
    push(to, state) {
        super.push(to, state);
        this.notifyListeners();
    }
    replace(to, state) {
        super.replace(to, state);
        this.notifyListeners();
    }
    notifyListeners() {
        for (const listener of this.listeners) {
            listener({ location: this.location, action: this.action });
        }
    }
    handleRootLocationChange(action) {
        const location = this.historyMultiplexer.getConsumerLocation(this.historyKey);
        if (this.matches(location)) {
            return;
        }
        this.location = location;
        this.action = action;
        this.notifyListeners();
    }
    matches(location) {
        if (history.createPath(location) !== history.createPath(this.location)) {
            return false;
        }
        return equal(location.state, this.location.state);
    }
}
//# sourceMappingURL=browser-consumer-history.js.map