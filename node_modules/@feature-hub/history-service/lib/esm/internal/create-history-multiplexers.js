import * as history from 'history';
import { HistoryMultiplexer } from './history-multiplexer';
export function createHistoryMultiplexers(context, rootLocationTransformer) {
    let browserHistoryMultiplexer;
    let staticHistoryMultiplexer;
    return {
        get browserHistoryMultiplexer() {
            if (!browserHistoryMultiplexer) {
                browserHistoryMultiplexer = new HistoryMultiplexer(history.createBrowserHistory(), rootLocationTransformer);
            }
            return browserHistoryMultiplexer;
        },
        get staticHistoryMultiplexer() {
            if (!staticHistoryMultiplexer) {
                if (!context.serverRequest) {
                    throw new Error('Static history can not be created without a server request.');
                }
                staticHistoryMultiplexer = new HistoryMultiplexer(history.createMemoryHistory({
                    initialEntries: [createPathFromUrl(context.serverRequest.url)],
                    initialIndex: 0,
                }), rootLocationTransformer);
            }
            return staticHistoryMultiplexer;
        },
    };
}
function createPathFromUrl(url) {
    if (isAbsolute(url)) {
        const { pathname, search } = new URL(url);
        return { pathname, search };
    }
    return history.parsePath(url);
}
function isAbsolute(url) {
    return /^https?:\/\//.test(url);
}
//# sourceMappingURL=create-history-multiplexers.js.map