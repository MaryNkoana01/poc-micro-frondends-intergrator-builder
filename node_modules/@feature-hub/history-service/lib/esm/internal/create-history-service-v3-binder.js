import { BrowserConsumerHistory } from './browser-consumer-history';
import { StaticConsumerHistory } from './static-consumer-history';
function createHistoryServiceV3(historyKey, consumerHistory, historyMultiplexer) {
    return {
        historyKey,
        history: consumerHistory,
        rootHistory: historyMultiplexer.rootHistory,
        createNewRootLocationForMultipleConsumers: (...consumerLocations) => historyMultiplexer.createNewRootLocationForMultipleConsumers(...consumerLocations),
    };
}
function createBrowserHistoryServiceV3Binding(context, historyMultiplexers, historyKey) {
    const consumerHistory = new BrowserConsumerHistory(context, historyKey, historyMultiplexers.browserHistoryMultiplexer);
    return {
        featureService: createHistoryServiceV3(historyKey, consumerHistory, historyMultiplexers.browserHistoryMultiplexer),
        unbind: () => {
            consumerHistory.destroy();
        },
    };
}
function createStaticHistoryServiceV3Binding(context, historyMultiplexers, consumerId) {
    const consumerHistory = new StaticConsumerHistory(context, consumerId, historyMultiplexers.staticHistoryMultiplexer);
    return {
        featureService: createHistoryServiceV3(consumerId, consumerHistory, historyMultiplexers.staticHistoryMultiplexer),
    };
}
export function createHistoryServiceV3Binder(context, historyMultiplexers, options) {
    const { mode, getHistoryKey } = options;
    return (consumerId, consumerName) => {
        const historyKey = getHistoryKey({ consumerId, consumerName });
        return mode === 'browser'
            ? createBrowserHistoryServiceV3Binding(context, historyMultiplexers, historyKey)
            : createStaticHistoryServiceV3Binding(context, historyMultiplexers, historyKey);
    };
}
//# sourceMappingURL=create-history-service-v3-binder.js.map