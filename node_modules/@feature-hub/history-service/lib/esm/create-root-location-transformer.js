import * as history from 'history';
import { URLSearchParams } from './internal/url-search-params';
function encodeConsumerPaths(consumerPaths) {
    return JSON.stringify(consumerPaths);
}
function decodeConsumerPaths(encodedConsumerPaths) {
    return JSON.parse(encodedConsumerPaths);
}
export function addConsumerPath(encodedConsumerPaths, historyKey, path) {
    return encodeConsumerPaths(Object.assign(Object.assign({}, decodeConsumerPaths(encodedConsumerPaths || '{}')), { [historyKey]: path }));
}
export function getConsumerPath(encodedConsumerPaths, historyKey) {
    return decodeConsumerPaths(encodedConsumerPaths)[historyKey];
}
export function createSearchParams(location) {
    return new URLSearchParams(location.search);
}
export function serializeSearchParams(searchParams) {
    return `?${searchParams.toString()}`;
}
export function createRootLocationForPrimaryConsumer(currentRootLocation, primaryConsumerLocation, consumerPathsQueryParamName) {
    const allSearchParams = createSearchParams(currentRootLocation);
    const newSearchParams = createSearchParams(primaryConsumerLocation);
    if (newSearchParams.has(consumerPathsQueryParamName)) {
        throw new Error(`Primary consumer tried to set query parameter ${JSON.stringify(consumerPathsQueryParamName)} which is reserverd for consumer paths.`);
    }
    const consumerPaths = allSearchParams.get(consumerPathsQueryParamName);
    let search;
    if (consumerPaths) {
        newSearchParams.set(consumerPathsQueryParamName, consumerPaths);
        search = serializeSearchParams(newSearchParams);
    }
    else {
        search = primaryConsumerLocation.search;
    }
    const { pathname, hash } = primaryConsumerLocation;
    return { pathname, search, hash };
}
export function createRootLocationForOtherConsumer(currentRootLocation, consumerLocation, historyKey, consumerPathsQueryParamName) {
    const allSearchParams = createSearchParams(currentRootLocation);
    const consumerPaths = allSearchParams.get(consumerPathsQueryParamName);
    const newConsumerPaths = addConsumerPath(consumerPaths, historyKey, history.createPath(consumerLocation));
    allSearchParams.set(consumerPathsQueryParamName, newConsumerPaths);
    return {
        pathname: currentRootLocation.pathname,
        search: serializeSearchParams(allSearchParams),
        hash: currentRootLocation.hash,
    };
}
export function createRootLocationTransformer(options) {
    return {
        getConsumerPathFromRootLocation: (rootLocation, historyKey) => {
            const { consumerPathsQueryParamName, primaryConsumerHistoryKey } = options;
            const isPrimaryConsumer = historyKey === primaryConsumerHistoryKey;
            const searchParams = createSearchParams(rootLocation);
            if (isPrimaryConsumer) {
                searchParams.delete(consumerPathsQueryParamName);
                const { pathname, hash } = rootLocation;
                const search = serializeSearchParams(searchParams);
                return history.createPath({ pathname, search, hash });
            }
            const consumerPaths = searchParams.get(consumerPathsQueryParamName);
            if (!consumerPaths) {
                return undefined;
            }
            return getConsumerPath(consumerPaths, historyKey);
        },
        createRootLocation: (currentRootLocation, consumerLocation, historyKey) => {
            const { consumerPathsQueryParamName, primaryConsumerHistoryKey } = options;
            const isPrimaryConsumer = historyKey === primaryConsumerHistoryKey;
            if (isPrimaryConsumer) {
                return createRootLocationForPrimaryConsumer(currentRootLocation, consumerLocation, consumerPathsQueryParamName);
            }
            return createRootLocationForOtherConsumer(currentRootLocation, consumerLocation, historyKey, consumerPathsQueryParamName);
        },
    };
}
//# sourceMappingURL=create-root-location-transformer.js.map