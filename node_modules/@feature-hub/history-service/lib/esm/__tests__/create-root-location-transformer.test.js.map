{"version":3,"file":"create-root-location-transformer.test.js","sourceRoot":"","sources":["../../../src/__tests__/create-root-location-transformer.test.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,6BAA6B,EAAC,MAAM,IAAI,CAAC;AAGjD,MAAM,mBAAmB,GAAG,CAAC,aAA4B,EAAE,EAAE,CAC3D,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;AAEpD,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;YACjC,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;gBAC/E,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;oBACxD,2BAA2B,EAAE,KAAK;iBACnC,CAAC,CAAC;gBAEH,IAAI,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,CACvD,EAAC,QAAQ,EAAE,GAAG,EAAC,EACf,EAAC,QAAQ,EAAE,MAAM,EAAC,EAClB,OAAO,CACR,CAAC;gBAEF,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,CACnD,YAAY,EACZ,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAC,EACnC,OAAO,CACR,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC;oBACjC,QAAQ,EAAE,GAAG;oBACb,MAAM,EAAE,QAAQ,mBAAmB,CAAC;wBAClC,KAAK,EAAE,MAAM;wBACb,KAAK,EAAE,YAAY;qBACpB,CAAC,EAAE;iBACL,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;YACnC,EAAE,CAAC,kFAAkF,EAAE,GAAG,EAAE;gBAC1F,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;oBACxD,2BAA2B,EAAE,KAAK;oBAClC,yBAAyB,EAAE,SAAS;iBACrC,CAAC,CAAC;gBAEH,MAAM,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,CACzD,EAAC,QAAQ,EAAE,GAAG,EAAC,EACf,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAC,EACxD,SAAS,CACV,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC;oBACjC,QAAQ,EAAE,MAAM;oBAChB,MAAM,EAAE,cAAc;oBACtB,IAAI,EAAE,MAAM;iBACb,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,gGAAgG,EAAE,GAAG,EAAE;gBAC9G,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;oBACzB,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;wBACxD,2BAA2B,EAAE,KAAK;wBAClC,yBAAyB,EAAE,SAAS;qBACrC,CAAC,CAAC;oBAEH,MAAM,CAAC,GAAG,EAAE,CACV,mBAAmB,CAAC,kBAAkB,CACpC,EAAC,QAAQ,EAAE,GAAG,EAAC,EACf,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAC,EACpC,SAAS,CACV,CACF,CAAC,YAAY,CACZ,IAAI,KAAK,CACP,4FAA4F,CAC7F,CACF,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACxD,EAAE,CAAC,+LAA+L,EAAE,GAAG,EAAE;gBACvM,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;oBACxD,2BAA2B,EAAE,KAAK;oBAClC,yBAAyB,EAAE,SAAS;iBACrC,CAAC,CAAC;gBAEH,IAAI,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,CACvD,EAAC,QAAQ,EAAE,GAAG,EAAC,EACf,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAC,EACpC,OAAO,CACR,CAAC;gBAEF,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,CACnD,YAAY,EACZ,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAC,EAClD,SAAS,CACV,CAAC;gBAEF,YAAY,GAAG,mBAAmB,CAAC,kBAAkB,CACnD,YAAY,EACZ,EAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAC,EAC1C,OAAO,CACR,CAAC;gBAEF,MAAM,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC;oBACjC,QAAQ,EAAE,MAAM;oBAChB,MAAM,EAAE,cAAc,mBAAmB,CAAC;wBACxC,KAAK,EAAE,YAAY;wBACnB,KAAK,EAAE,kBAAkB;qBAC1B,CAAC,EAAE;oBACJ,IAAI,EAAE,MAAM;iBACb,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,QAAQ,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC/D,EAAE,CAAC,mFAAmF,EAAE,GAAG,EAAE;gBAC3F,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;oBACxD,2BAA2B,EAAE,KAAK;oBAClC,yBAAyB,EAAE,SAAS;iBACrC,CAAC,CAAC;gBAEH,MAAM,YAAY,GAAG;oBACnB,QAAQ,EAAE,MAAM;oBAChB,MAAM,EAAE,cAAc,mBAAmB,CAAC,EAAC,KAAK,EAAE,YAAY,EAAC,CAAC,EAAE;oBAClE,IAAI,EAAE,cAAc;iBACrB,CAAC;gBAEF,MAAM,CACJ,mBAAmB,CAAC,+BAA+B,CACjD,YAAwB,EACxB,SAAS,CACV,CACF,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;gBAEpC,MAAM,CACJ,mBAAmB,CAAC,+BAA+B,CACjD,YAAwB,EACxB,OAAO,CACR,CACF,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBAExB,MAAM,CACJ,mBAAmB,CAAC,+BAA+B,CACjD,YAAwB,EACxB,OAAO,CACR,CACF,CAAC,aAAa,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAClE,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;gBACtD,MAAM,mBAAmB,GAAG,6BAA6B,CAAC;oBACxD,2BAA2B,EAAE,KAAK;oBAClC,yBAAyB,EAAE,SAAS;iBACrC,CAAC,CAAC;gBAEH,MAAM,YAAY,GAAG;oBACnB,QAAQ,EAAE,MAAM;oBAChB,MAAM,EAAE,QAAQ;iBACjB,CAAC;gBAEF,MAAM,CACJ,mBAAmB,CAAC,+BAA+B,CACjD,YAAwB,EACxB,OAAO,CACR,CACF,CAAC,aAAa,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {Location} from 'history';\nimport {createRootLocationTransformer} from '..';\nimport {ConsumerPaths} from '../create-root-location-transformer';\n\nconst encodeConsumerPaths = (consumerPaths: ConsumerPaths) =>\n  encodeURIComponent(JSON.stringify(consumerPaths));\n\ndescribe('#createRootLocationTransformer', () => {\n  describe('#createRootLocation', () => {\n    describe('without a primary', () => {\n      it('joins all consumer locations together as a single encoded query param', () => {\n        const locationTransformer = createRootLocationTransformer({\n          consumerPathsQueryParamName: '---',\n        });\n\n        let rootLocation = locationTransformer.createRootLocation(\n          {pathname: '/'},\n          {pathname: '/foo'},\n          'test1',\n        );\n\n        rootLocation = locationTransformer.createRootLocation(\n          rootLocation,\n          {pathname: '/bar', search: 'baz=1'},\n          'test2',\n        );\n\n        expect(rootLocation).toMatchObject({\n          pathname: '/',\n          search: `?---=${encodeConsumerPaths({\n            test1: '/foo',\n            test2: '/bar?baz=1',\n          })}`,\n        });\n      });\n    });\n\n    describe('with only a primary', () => {\n      it('puts the location pathname, query params, and hash directly to the root location', () => {\n        const locationTransformer = createRootLocationTransformer({\n          consumerPathsQueryParamName: '---',\n          primaryConsumerHistoryKey: 'testPri',\n        });\n\n        const rootLocation = locationTransformer.createRootLocation(\n          {pathname: '/'},\n          {pathname: '/foo', search: '?bar=1&baz=2', hash: '#qux'},\n          'testPri',\n        );\n\n        expect(rootLocation).toMatchObject({\n          pathname: '/foo',\n          search: '?bar=1&baz=2',\n          hash: '#qux',\n        });\n      });\n\n      describe('when the primary tries to set a query param that conflicts with the consumer paths query param', () => {\n        it('throws an error', () => {\n          const locationTransformer = createRootLocationTransformer({\n            consumerPathsQueryParamName: '---',\n            primaryConsumerHistoryKey: 'testPri',\n          });\n\n          expect(() =>\n            locationTransformer.createRootLocation(\n              {pathname: '/'},\n              {pathname: '/foo', search: '?---=1'},\n              'testPri',\n            ),\n          ).toThrowError(\n            new Error(\n              `Primary consumer tried to set query parameter \"---\" which is reserverd for consumer paths.`,\n            ),\n          );\n        });\n      });\n    });\n\n    describe('with the primary and two other consumers', () => {\n      it('takes the pathname, query params, and hash of the primary consumer directly, and the pathname and query params of the other consumers encoded as a single query param, into the root location', () => {\n        const locationTransformer = createRootLocationTransformer({\n          consumerPathsQueryParamName: '---',\n          primaryConsumerHistoryKey: 'testPri',\n        });\n\n        let rootLocation = locationTransformer.createRootLocation(\n          {pathname: '/'},\n          {pathname: '/baz', search: '?qux=3'},\n          'test1',\n        );\n\n        rootLocation = locationTransformer.createRootLocation(\n          rootLocation,\n          {pathname: '/foo', search: '?bar=1', hash: '#qux'},\n          'testPri',\n        );\n\n        rootLocation = locationTransformer.createRootLocation(\n          rootLocation,\n          {pathname: '/some', search: '?thing=else'},\n          'test2',\n        );\n\n        expect(rootLocation).toMatchObject({\n          pathname: '/foo',\n          search: `?bar=1&---=${encodeConsumerPaths({\n            test1: '/baz?qux=3',\n            test2: '/some?thing=else',\n          })}`,\n          hash: '#qux',\n        });\n      });\n    });\n  });\n\n  describe('#getConsumerPathFromRootLocation', () => {\n    describe('with consumers encoded into the query parameter', () => {\n      it('returns the consumer-specific locations including a hash for the primary consumer', () => {\n        const locationTransformer = createRootLocationTransformer({\n          consumerPathsQueryParamName: '---',\n          primaryConsumerHistoryKey: 'testPri',\n        });\n\n        const rootLocation = {\n          pathname: '/foo',\n          search: `?bar=1&---=${encodeConsumerPaths({test1: '/baz?qux=3'})}`,\n          hash: '#some-anchor',\n        };\n\n        expect(\n          locationTransformer.getConsumerPathFromRootLocation(\n            rootLocation as Location,\n            'testPri',\n          ),\n        ).toEqual('/foo?bar=1#some-anchor');\n\n        expect(\n          locationTransformer.getConsumerPathFromRootLocation(\n            rootLocation as Location,\n            'test1',\n          ),\n        ).toEqual('/baz?qux=3');\n\n        expect(\n          locationTransformer.getConsumerPathFromRootLocation(\n            rootLocation as Location,\n            'test2',\n          ),\n        ).toBeUndefined();\n      });\n    });\n\n    describe('without consumers encoded into the query parameter', () => {\n      it('returns undefined for a non-primary consumer', () => {\n        const locationTransformer = createRootLocationTransformer({\n          consumerPathsQueryParamName: '---',\n          primaryConsumerHistoryKey: 'testPri',\n        });\n\n        const rootLocation = {\n          pathname: '/foo',\n          search: '?bar=1',\n        };\n\n        expect(\n          locationTransformer.getConsumerPathFromRootLocation(\n            rootLocation as Location,\n            'test2',\n          ),\n        ).toBeUndefined();\n      });\n    });\n  });\n});\n"]}