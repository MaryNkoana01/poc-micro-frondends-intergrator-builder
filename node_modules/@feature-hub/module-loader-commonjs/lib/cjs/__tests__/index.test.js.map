{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../src/__tests__/index.test.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAGH,0BAAkE;AAElE,IAAI,YAAoB,CAAC;AACzB,IAAI,UAAuB,CAAC;AAC5B,IAAI,WAAwB,CAAC;AAE7B,wCAAwC;AACxC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC,GAAgB,EAAE,IAAiB,EAAE,EAAE;IACpE,UAAU,GAAG,GAAG,CAAC;IACjB,WAAW,GAAG,IAAI,CAAC;IAEnB,OAAO,OAAO,CAAC,OAAO,CAAC;QACrB,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACvD,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,uCAAuC;AAEvC,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,GAAG,GAAG,4BAA4B,CAAC;QAEzC,YAAY,GAAG;;;;;KAKd,CAAC;QAEF,MAAM,YAAY,GAAG,MAAM,IAAA,sBAAkB,EAAC,GAAG,CAAC,CAAC;QACnD,MAAM,cAAc,GAAG,EAAC,OAAO,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,EAAC,CAAC;QAElD,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,GAAG,GAAG,4BAA4B,CAAC;QACzC,MAAM,IAAI,GAAgB,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC;QAE3C,YAAY,GAAG;;;;;KAKd,CAAC;QAEF,MAAM,+BAA+B,GAAG,IAAA,8BAA0B,EAChE,EAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAC,EACf,IAAI,CACL,CAAC;QAEF,MAAM,YAAY,GAAG,MAAM,+BAA+B,CAAC,GAAG,CAAC,CAAC;QAChE,MAAM,cAAc,GAAG,EAAC,OAAO,EAAE,EAAC,IAAI,EAAE,EAAE,EAAC,EAAC,CAAC;QAE7C,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @jest-environment node\n */\n\nimport {RequestInit} from 'node-fetch';\nimport {createCommonJsModuleLoader, loadCommonJsModule} from '..';\n\nlet mockResponse: string;\nlet requestUrl: RequestInfo;\nlet requestInit: RequestInit;\n\n// tslint:disable promise-function-async\njest.mock('node-fetch', () => (url: RequestInfo, init: RequestInit) => {\n  requestUrl = url;\n  requestInit = init;\n\n  return Promise.resolve({\n    text: () => Promise.resolve(Buffer.from(mockResponse)),\n  });\n});\n// tslint:enable promise-function-async\n\ndescribe('loadCommonJsModule (on Node.js)', () => {\n  it('when a module is fetched successfully', async () => {\n    const url = 'http://example.com/test.js';\n\n    mockResponse = `\n      var semver = require('semver');\n      module.exports = {\n        default: {test: semver.coerce('1').version}\n      };\n    `;\n\n    const loadedModule = await loadCommonJsModule(url);\n    const expectedModule = {default: {test: '1.0.0'}};\n\n    expect(loadedModule).toEqual(expectedModule);\n  });\n});\n\ndescribe('createCommonJsModuleLoader', () => {\n  it('creates a CommonJS module loader with custom-defined externals', async () => {\n    const url = 'http://example.com/test.js';\n    const init: RequestInit = {method: 'post'};\n\n    mockResponse = `\n      var foo = require('foo');\n      module.exports = {\n        default: {test: foo()}\n      };\n    `;\n\n    const loadCommonJsModuleWithExternals = createCommonJsModuleLoader(\n      {foo: () => 42},\n      init,\n    );\n\n    const loadedModule = await loadCommonJsModuleWithExternals(url);\n    const expectedModule = {default: {test: 42}};\n\n    expect(loadedModule).toEqual(expectedModule);\n    expect(requestUrl).toEqual(url);\n    expect(requestInit).toEqual(init);\n  });\n});\n"]}