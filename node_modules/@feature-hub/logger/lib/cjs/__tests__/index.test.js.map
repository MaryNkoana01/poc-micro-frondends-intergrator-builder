{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../src/__tests__/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:no-implicit-dependencies\n// tslint:disable:no-non-null-assertion\n\nimport {\n  FeatureServiceEnvironment,\n  FeatureServiceProviderDefinition,\n} from '@feature-hub/core';\nimport {Logger, SharedLogger, defineLogger} from '..';\n\ndescribe('defineLogger', () => {\n  let mockEnv: FeatureServiceEnvironment<{}>;\n\n  let loggerDefinition: FeatureServiceProviderDefinition<SharedLogger>;\n\n  beforeEach(() => {\n    mockEnv = {featureServices: {}};\n    loggerDefinition = defineLogger();\n  });\n\n  it('creates a Logger definition', () => {\n    expect(loggerDefinition.id).toBe('s2:logger');\n    expect(loggerDefinition.dependencies).toBeUndefined();\n  });\n\n  describe('#create', () => {\n    it('creates a shared Feature Service containing version 1.0.0', () => {\n      const sharedLogger = loggerDefinition.create(mockEnv);\n\n      expect(sharedLogger!['1.0.0']).toBeDefined();\n    });\n  });\n\n  describe('Logger', () => {\n    let logger: Logger;\n\n    describe('with the default createConsumerLogger function', () => {\n      beforeEach(() => {\n        logger = loggerDefinition\n          .create(mockEnv)!\n          ['1.0.0']('test:id').featureService;\n      });\n\n      const loggerMethods: (keyof Logger)[] = [\n        'trace',\n        'debug',\n        'info',\n        'warn',\n        'error',\n      ];\n\n      describe.each(loggerMethods)('#%s', (method) => {\n        let stubbedConsoleMethod: jest.SpyInstance;\n\n        beforeEach(() => {\n          stubbedConsoleMethod = jest.spyOn(console, method);\n        });\n\n        it(`delegates to console.${method}`, () => {\n          logger[method]('test');\n\n          expect(stubbedConsoleMethod.mock.calls).toEqual([['test']]);\n        });\n\n        it('preserves the call stack', () => {\n          stubbedConsoleMethod.mockImplementationOnce(() => {\n            throw new Error(`mock error for ${method}}`);\n          });\n\n          expect.assertions(2);\n\n          try {\n            logger[method]('test');\n          } catch (error) {\n            expect((error as Error).stack).toMatch(\n              /logger\\/src\\/__tests__\\/index.test\\.(js|ts)/,\n            );\n\n            expect((error as Error).stack).not.toMatch(\n              /logger\\/src\\/index\\.(js|ts)/,\n            );\n          }\n        });\n      });\n    });\n\n    describe('with a custom createConsumerLogger function', () => {\n      let mockConsumerLogger: Logger;\n      let mockCreateConsumerLogger: jest.Mock<Logger>;\n\n      beforeEach(() => {\n        mockConsumerLogger = {\n          trace: jest.fn(),\n          debug: jest.fn(),\n          info: jest.fn(),\n          warn: jest.fn(),\n          error: jest.fn(),\n        };\n\n        mockCreateConsumerLogger = jest.fn(() => mockConsumerLogger);\n\n        loggerDefinition = defineLogger(mockCreateConsumerLogger);\n\n        logger = loggerDefinition\n          .create(mockEnv)!\n          ['1.0.0']('test:id', 'test:name').featureService;\n      });\n\n      it('calls the given createConsumerLogger with the consumerId and consumerName', () => {\n        expect(mockCreateConsumerLogger.mock.calls).toEqual([\n          ['test:id', 'test:name'],\n        ]);\n      });\n\n      it('uses the defined consumer logger as Feature Service', () => {\n        expect(logger).toBe(mockConsumerLogger);\n      });\n    });\n  });\n});\n"]}