"use strict";
// tslint:disable:no-implicit-dependencies
// tslint:disable:no-non-null-assertion
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
describe('defineLogger', () => {
    let mockEnv;
    let loggerDefinition;
    beforeEach(() => {
        mockEnv = { featureServices: {} };
        loggerDefinition = (0, __1.defineLogger)();
    });
    it('creates a Logger definition', () => {
        expect(loggerDefinition.id).toBe('s2:logger');
        expect(loggerDefinition.dependencies).toBeUndefined();
    });
    describe('#create', () => {
        it('creates a shared Feature Service containing version 1.0.0', () => {
            const sharedLogger = loggerDefinition.create(mockEnv);
            expect(sharedLogger['1.0.0']).toBeDefined();
        });
    });
    describe('Logger', () => {
        let logger;
        describe('with the default createConsumerLogger function', () => {
            beforeEach(() => {
                logger = loggerDefinition
                    .create(mockEnv)['1.0.0']('test:id').featureService;
            });
            const loggerMethods = [
                'trace',
                'debug',
                'info',
                'warn',
                'error',
            ];
            describe.each(loggerMethods)('#%s', (method) => {
                let stubbedConsoleMethod;
                beforeEach(() => {
                    stubbedConsoleMethod = jest.spyOn(console, method);
                });
                it(`delegates to console.${method}`, () => {
                    logger[method]('test');
                    expect(stubbedConsoleMethod.mock.calls).toEqual([['test']]);
                });
                it('preserves the call stack', () => {
                    stubbedConsoleMethod.mockImplementationOnce(() => {
                        throw new Error(`mock error for ${method}}`);
                    });
                    expect.assertions(2);
                    try {
                        logger[method]('test');
                    }
                    catch (error) {
                        expect(error.stack).toMatch(/logger\/src\/__tests__\/index.test\.(js|ts)/);
                        expect(error.stack).not.toMatch(/logger\/src\/index\.(js|ts)/);
                    }
                });
            });
        });
        describe('with a custom createConsumerLogger function', () => {
            let mockConsumerLogger;
            let mockCreateConsumerLogger;
            beforeEach(() => {
                mockConsumerLogger = {
                    trace: jest.fn(),
                    debug: jest.fn(),
                    info: jest.fn(),
                    warn: jest.fn(),
                    error: jest.fn(),
                };
                mockCreateConsumerLogger = jest.fn(() => mockConsumerLogger);
                loggerDefinition = (0, __1.defineLogger)(mockCreateConsumerLogger);
                logger = loggerDefinition
                    .create(mockEnv)['1.0.0']('test:id', 'test:name').featureService;
            });
            it('calls the given createConsumerLogger with the consumerId and consumerName', () => {
                expect(mockCreateConsumerLogger.mock.calls).toEqual([
                    ['test:id', 'test:name'],
                ]);
            });
            it('uses the defined consumer logger as Feature Service', () => {
                expect(logger).toBe(mockConsumerLogger);
            });
        });
    });
});
//# sourceMappingURL=index.test.js.map