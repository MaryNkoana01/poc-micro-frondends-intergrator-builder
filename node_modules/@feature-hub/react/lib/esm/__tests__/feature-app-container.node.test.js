/**
 * @jest-environment node
 */
import * as React from 'react';
import ReactDOM from 'react-dom/server';
import { FeatureAppContainer, FeatureHubContextProvider } from '..';
describe('FeatureAppContainer (on Node.js)', () => {
    let mockFeatureAppManager;
    let mockCreateFeatureAppScope;
    let mockFeatureAppDefinition;
    let mockFeatureAppScope;
    let consoleErrorSpy;
    let consoleWarnSpy;
    const expectConsoleErrorCalls = (expectedConsoleErrorCalls) => {
        try {
            expect(consoleErrorSpy.mock.calls).toEqual(expectedConsoleErrorCalls);
        }
        finally {
            consoleErrorSpy.mockClear();
        }
    };
    beforeEach(() => {
        mockFeatureAppDefinition = { create: jest.fn() };
        mockFeatureAppScope = { featureApp: {}, release: jest.fn() };
        mockCreateFeatureAppScope = jest.fn(() => (Object.assign({}, mockFeatureAppScope)));
        mockFeatureAppManager = {
            getAsyncFeatureAppDefinition: jest.fn(),
            createFeatureAppScope: mockCreateFeatureAppScope,
            preloadFeatureApp: jest.fn(),
        };
        consoleErrorSpy = jest.spyOn(console, 'error');
        consoleWarnSpy = jest.spyOn(console, 'warn');
    });
    afterEach(() => {
        expect(consoleErrorSpy).not.toHaveBeenCalled();
        consoleErrorSpy.mockRestore();
        expect(consoleWarnSpy).not.toHaveBeenCalled();
        consoleWarnSpy.mockRestore();
    });
    const renderWithFeatureHubContext = (node) => ReactDOM.renderToString(React.createElement(FeatureHubContextProvider, { value: { featureAppManager: mockFeatureAppManager } }, node));
    for (const invalidFeatureApp of [
        undefined,
        null,
        {},
        { attachTo: 'foo' },
        { render: 'foo' },
    ]) {
        describe(`when an invalid Feature App (${JSON.stringify(invalidFeatureApp)}) is created`, () => {
            beforeEach(() => {
                mockFeatureAppScope = {
                    featureApp: invalidFeatureApp,
                    release: jest.fn(),
                };
            });
            it('logs an error', () => {
                const expectedError = new Error('Invalid Feature App found. The Feature App must be an object with either 1) a `render` method that returns a React element, or 2) an `attachTo` method that accepts a container DOM element.');
                renderWithFeatureHubContext(React.createElement(FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition }));
                expectConsoleErrorCalls([[expectedError]]);
            });
        });
    }
    describe('when a Feature App scope fails to be created', () => {
        let mockError;
        beforeEach(() => {
            mockError = new Error('Failed to create Feature App scope.');
            mockCreateFeatureAppScope.mockImplementation(() => {
                throw mockError;
            });
        });
        it('logs an error', () => {
            renderWithFeatureHubContext(React.createElement(FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition }));
            expectConsoleErrorCalls([[mockError]]);
        });
    });
    describe('when a Feature App throws in render', () => {
        let mockError;
        beforeEach(() => {
            mockError = new Error('Failed to render.');
            mockFeatureAppScope = Object.assign(Object.assign({}, mockFeatureAppScope), { featureApp: {
                    render: () => {
                        throw mockError;
                    },
                } });
        });
        it('logs the error', () => {
            renderWithFeatureHubContext(React.createElement(FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition }));
            expectConsoleErrorCalls([[mockError]]);
        });
    });
    describe('when using a loading promise', () => {
        let resolveLoadingPromise;
        let rejectLoadingPromise;
        beforeEach(() => {
            const loadingPromise = new Promise((resolve, reject) => {
                resolveLoadingPromise = async () => {
                    resolve();
                    // promsise returns itself so we don't forget to await next
                    // async tick in tests
                    return loadingPromise;
                };
                rejectLoadingPromise = async (e) => {
                    reject(e);
                    return loadingPromise.catch(() => undefined);
                };
            });
            mockFeatureAppScope = Object.assign(Object.assign({}, mockFeatureAppScope), { featureApp: {
                    loadingPromise,
                    render: () => 'Rendered a Feature App',
                } });
        });
        it('renders with loading=true, resolved loading promise is ignored', async () => {
            const children = jest.fn(() => null);
            renderWithFeatureHubContext(React.createElement(FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition, children: children }));
            expect(children).toHaveBeenCalledTimes(1);
            expect(children.mock.calls[0]).toMatchObject([{ loading: true }]);
            await resolveLoadingPromise();
            expect(children).toHaveBeenCalledTimes(1);
        });
        it('ignores a rejected loading promise', async () => {
            const children = jest.fn(() => null);
            renderWithFeatureHubContext(React.createElement(FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition, children: children }));
            expect(children).toHaveBeenCalledTimes(1);
            await rejectLoadingPromise();
            expect(children).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=feature-app-container.node.test.js.map