import * as React from 'react';
import { FeatureAppContext } from './feature-app-context';
import { isDomFeatureApp, isFeatureApp, isReactFeatureApp } from './type-guards';
export const handleError = (logger, error, onError) => {
    if (onError) {
        onError(error);
    }
    else {
        logger.error(error);
    }
};
export class InternalFeatureAppContainer extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = { loading: true };
        this.containerRef = React.createRef();
        this.mounted = false;
        this.loadingPromiseHandled = false;
        this.domFeatureAppAttached = false;
    }
    static getDerivedStateFromProps(props, state) {
        const { baseUrl, beforeCreate, config, featureAppId, featureAppName, featureAppManager, featureAppDefinition, done, logger, onError, parentFeatureApp, } = props;
        if (featureAppDefinition && !state.featureApp && !state.error) {
            try {
                const featureAppScope = featureAppManager.createFeatureAppScope(featureAppId, featureAppDefinition, {
                    featureAppName,
                    baseUrl,
                    config,
                    beforeCreate,
                    done,
                    parentFeatureApp,
                });
                const { featureApp, release } = featureAppScope;
                if (!isFeatureApp(featureApp)) {
                    throw new Error('Invalid Feature App found. The Feature App must be an object with either 1) a `render` method that returns a React element, or 2) an `attachTo` method that accepts a container DOM element.');
                }
                return {
                    featureApp,
                    release,
                    loading: Boolean(featureApp.loadingPromise),
                };
            }
            catch (error) {
                try {
                    handleError(logger, error, onError);
                }
                catch (handlerError) {
                    return {
                        error: handlerError,
                        loading: false,
                        failedToHandleAsyncError: true,
                    };
                }
                return { error, loading: false };
            }
        }
        return null;
    }
    componentDidCatch(error) {
        this.handleError(error);
        this.setState({ error, loading: false });
    }
    componentDidMount() {
        this.mounted = true;
        this.attachDomFeatureApp();
        this.handleLoading();
    }
    componentDidUpdate() {
        this.attachDomFeatureApp();
        this.handleLoading();
    }
    componentWillUnmount() {
        this.mounted = false;
        if (this.state && this.state.release) {
            try {
                this.state.release();
            }
            catch (error) {
                this.handleError(error);
            }
        }
    }
    render() {
        if ('error' in this.state && this.state.error) {
            if (this.state.failedToHandleAsyncError) {
                throw this.state.error;
            }
            return this.renderError(this.state.error);
        }
        const { children, featureAppId, featureAppName } = this.props;
        if (!this.state.featureApp) {
            return children ? children({ loading: true }) : null;
        }
        const { featureApp, loading } = this.state;
        let featureAppNode;
        if (isReactFeatureApp(featureApp)) {
            try {
                featureAppNode = featureApp.render();
            }
            catch (error) {
                this.handleError(error);
                return this.renderError(error);
            }
        }
        else {
            featureAppNode = React.createElement("div", { ref: this.containerRef });
        }
        return (React.createElement(FeatureAppContext.Provider, { value: { featureAppId, featureAppName } }, children ? children({ featureAppNode, loading }) : featureAppNode));
    }
    handleLoading() {
        const { featureApp } = this.state;
        if (featureApp &&
            featureApp.loadingPromise &&
            !this.loadingPromiseHandled) {
            this.loadingPromiseHandled = true;
            featureApp.loadingPromise
                .then(() => {
                if (this.mounted) {
                    this.setState({ loading: false });
                }
            })
                .catch((loadingError) => {
                try {
                    this.handleError(loadingError);
                    if (this.mounted) {
                        this.setState({
                            error: loadingError,
                            failedToHandleAsyncError: false,
                            loading: false,
                        });
                    }
                }
                catch (handlerError) {
                    if (this.mounted) {
                        this.setState({
                            error: handlerError,
                            failedToHandleAsyncError: true,
                            loading: false,
                        });
                    }
                }
            });
        }
    }
    renderError(error) {
        const { children } = this.props;
        return children ? children({ error, loading: false }) : null;
    }
    handleError(error) {
        const { logger, onError } = this.props;
        handleError(logger, error, onError);
    }
    attachDomFeatureApp() {
        if (this.state.featureApp &&
            !this.domFeatureAppAttached &&
            this.containerRef.current &&
            !('error' in this.state) &&
            isDomFeatureApp(this.state.featureApp)) {
            try {
                this.state.featureApp.attachTo(this.containerRef.current);
                this.domFeatureAppAttached = true;
            }
            catch (error) {
                this.componentDidCatch(error);
            }
        }
    }
}
//# sourceMappingURL=internal-feature-app-container.js.map