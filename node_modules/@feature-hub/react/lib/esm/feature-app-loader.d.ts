import { FeatureAppEnvironment, FeatureServices } from '@feature-hub/core';
import * as React from 'react';
import { CustomFeatureAppRenderingParams } from './feature-app-container';
import { Css } from './feature-hub-context';
import { FeatureAppDescriptor } from './internal/internal-feature-app-container';
export interface FeatureAppLoaderProps<TConfig = unknown> extends FeatureAppDescriptor {
    /**
     * The absolute or relative base URL of the Feature App's assets and/or BFF.
     */
    readonly baseUrl?: string;
    /**
     * The URL of the Feature App's client module bundle. If [[baseUrl]] is
     * specified, it will be prepended, unless `src` is an absolute URL.
     */
    readonly src: string;
    /**
     * The module type of the Feature App's client module bundle. It is passed to
     * the module loader that was provided as part of
     * [[FeatureAppManagerOptions.moduleLoader]].
     */
    readonly moduleType?: string;
    /**
     * The URL of the Feature App's server module bundle. If [[baseUrl]] is
     * specified, it will be prepended, unless `serverSrc` is an absolute URL.
     * Either [[baseUrl]] or `serverSrc` must be an absolute URL.
     */
    readonly serverSrc?: string;
    /**
     * The module type of the Feature App's server module bundle. It is passed to
     * the module loader that was provided as part of
     * [[FeatureAppManagerOptions.moduleLoader]].
     */
    readonly serverModuleType?: string;
    /**
     * A list of stylesheets to be added to the document. If [[baseUrl]] is
     * specified, it will be prepended, unless [[Css.href]] is an absolute URL.
     */
    readonly css?: Css[];
    /**
     * A config object that is passed to the Feature App's `create` method.
     */
    readonly config?: TConfig;
    /**
     * A callback that is called before the Feature App is created.
     */
    readonly beforeCreate?: (env: FeatureAppEnvironment<FeatureServices, TConfig>) => void;
    /**
     * A callback that is passed to the Feature App's `create` method. A
     * short-lived Feature App can call this function when it has completed its
     * task. The Integrator (or parent Feature App) can then decide to e.g.
     * unmount the Feature App.
     *
     * Optionally, the Feature App can pass a result into the done callback. The
     * type/structure of the result must be agreed between the Integrator (or
     * parent Feature App) and the Feature App.
     */
    readonly done?: (result?: unknown) => void;
    readonly onError?: (error: unknown) => void;
    /**
     * A children function can be provided to customize rendering of the
     * Feature App and provide Error or Loading UIs.
     */
    readonly children?: (params: CustomFeatureAppRenderingParams) => React.ReactNode;
}
/**
 * The `FeatureAppLoader` component allows the integrator to load Feature Apps
 * from a remote location. It can also be used by a Feature App to render
 * another Feature App as a child.
 *
 * When a Feature App throws an error while rendering or, in the case of a
 * [[ReactFeatureApp]], throws an error in a lifecycle method, the
 * `FeatureAppLoader` renders `null`. On the server, however, rendering
 * errors are not caught and must therefore be handled by the integrator.
 */
export declare function FeatureAppLoader<TConfig>(props: FeatureAppLoaderProps<TConfig>): JSX.Element;
//# sourceMappingURL=feature-app-loader.d.ts.map