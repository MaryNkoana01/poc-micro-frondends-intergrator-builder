{"version":3,"file":"feature-hub-context.js","sourceRoot":"","sources":["../../src/feature-hub-context.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,6CAA+B;AA8D/B,MAAM,oCAAoC,GACxC,mRAAmR,CAAC;AAEzQ,QAAA,iBAAiB,GAAG,KAAK,CAAC,aAAa,CAElD,SAAS,CAAC,CAAC;AAEb;;;;;GAKG;AACU,QAAA,yBAAyB,GAAG,yBAAiB,CAAC,QAAQ,CAAC;AAEpE;;;;;GAKG;AACH,SAAgB,yBAAyB,CACvC,KAA0D;IAE1D,OAAO,CACL,oBAAC,yBAAiB,CAAC,QAAQ,QACxB,CAAC,sBAAsB,EAAE,EAAE;QAC1B,IAAI,CAAC,sBAAsB,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACvD;QAED,2CAA2C;QAC3C,MAAM,EAAC,MAAM,GAAG,OAAO,KAAa,sBAAsB,EAA9B,IAAI,UAAI,sBAAsB,EAApD,UAA2B,CAAyB,CAAC;QAE3D,OAAO,KAAK,CAAC,QAAQ,iBAAE,MAAM,IAAK,IAAI,EAAE,CAAC;IAC3C,CAAC,CAC0B,CAC9B,CAAC;AACJ,CAAC;AAjBD,8DAiBC","sourcesContent":["import {AsyncSsrManagerV1} from '@feature-hub/async-ssr-manager';\nimport {FeatureAppManager, Logger} from '@feature-hub/core';\nimport * as React from 'react';\n\ntype SomeRequired<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>> &\n  Required<Pick<T, K>>;\n\nexport interface Css {\n  readonly href: string;\n  readonly media?: string;\n}\n\nexport interface FeatureHubContextProviderValue {\n  /**\n   * The `FeatureAppManager` singleton instance.\n   */\n  readonly featureAppManager: FeatureAppManager;\n\n  /**\n   * A custom logger that shall be used instead of `console`.\n   */\n  readonly logger?: Logger;\n\n  /**\n   * The Async SSR Manager Feature Service that is bound to the integrator. It\n   * is only provided on the server.\n   */\n  readonly asyncSsrManager?: AsyncSsrManagerV1;\n\n  /**\n   * A callback that the integrator provides on the server, mainly for the\n   * [[FeatureAppLoader]], to add client URLs of those Feature Apps that are\n   * rendered on the server, so that they can be preloaded on the client before\n   * hydration. This method might be called multiple times with the same URL\n   * during server-side rendering. Therefore deduplication should be considered.\n   *\n   * @param url The **client** URL of a Feature App that is rendered on the\n   * server.\n   *\n   * @param moduleType The **client** module type of the Feature App that is\n   * rendered on the server. This value can be used by the provided\n   * [[FeatureAppManagerOptions.moduleLoader]].\n   */\n  addUrlForHydration?(url: string, moduleType?: string): void;\n\n  /**\n   * A callback that the integrator provides on the server, mainly for the\n   * [[FeatureAppLoader]], to add stylesheets for those Feature Apps that are\n   * rendered on the server, so that they can be added to the document before\n   * being sent to the client. This method might be called multiple times with\n   * the same list of stylesheets (per Feature App) during server-side\n   * rendering. Therefore deduplication should be considered.\n   *\n   * @param stylesheets A list of stylesheets for a Feature App that is rendered\n   * on the server.\n   */\n  addStylesheetsForSsr?(stylesheets: Css[]): void;\n}\n\nexport type FeatureHubContextConsumerValue = SomeRequired<\n  FeatureHubContextProviderValue,\n  'logger'\n>;\n\nconst noFeatureHubContextValueErrorMessage =\n  'No Feature Hub context was provided! There are two possible causes: 1.) No FeatureHubContextProvider was rendered in the React tree. 2.) A Feature App that renders itself a FeatureAppLoader or a FeatureAppContainer did not declare @feature-hub/react as an external package.';\n\nexport const FeatureHubContext = React.createContext<\n  FeatureHubContextProviderValue | undefined\n>(undefined);\n\n/**\n * The integrator must render a `FeatureHubContextProvider` to provide the\n * `FeatureAppManager` singleton instance, as well as the Async SSR Manager\n * Feature Service (optionally), to Feature Hub context consumers, e.g. the\n * [[FeatureAppLoader]] or [[FeatureAppContainer]].\n */\nexport const FeatureHubContextProvider = FeatureHubContext.Provider;\n\n/**\n * A `FeatureHubContextConsumer` can be used to retrieve the `FeatureAppManager`\n * singleton instance, as well as the Async SSR Manager Feature Service (if it\n * is provided by the integrator). Its main purpose is to be used inside the\n * [[FeatureAppLoader]] and [[FeatureAppContainer]].\n */\nexport function FeatureHubContextConsumer(\n  props: React.ConsumerProps<FeatureHubContextConsumerValue>,\n): JSX.Element {\n  return (\n    <FeatureHubContext.Consumer>\n      {(featureHubContextValue) => {\n        if (!featureHubContextValue) {\n          throw new Error(noFeatureHubContextValueErrorMessage);\n        }\n\n        // Provide `console` as the default logger.\n        const {logger = console, ...rest} = featureHubContextValue;\n\n        return props.children({logger, ...rest});\n      }}\n    </FeatureHubContext.Consumer>\n  );\n}\n"]}