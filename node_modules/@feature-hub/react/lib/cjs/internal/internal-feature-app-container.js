"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalFeatureAppContainer = exports.handleError = void 0;
const React = __importStar(require("react"));
const feature_app_context_1 = require("./feature-app-context");
const type_guards_1 = require("./type-guards");
const handleError = (logger, error, onError) => {
    if (onError) {
        onError(error);
    }
    else {
        logger.error(error);
    }
};
exports.handleError = handleError;
class InternalFeatureAppContainer extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = { loading: true };
        this.containerRef = React.createRef();
        this.mounted = false;
        this.loadingPromiseHandled = false;
        this.domFeatureAppAttached = false;
    }
    static getDerivedStateFromProps(props, state) {
        const { baseUrl, beforeCreate, config, featureAppId, featureAppName, featureAppManager, featureAppDefinition, done, logger, onError, parentFeatureApp, } = props;
        if (featureAppDefinition && !state.featureApp && !state.error) {
            try {
                const featureAppScope = featureAppManager.createFeatureAppScope(featureAppId, featureAppDefinition, {
                    featureAppName,
                    baseUrl,
                    config,
                    beforeCreate,
                    done,
                    parentFeatureApp,
                });
                const { featureApp, release } = featureAppScope;
                if (!(0, type_guards_1.isFeatureApp)(featureApp)) {
                    throw new Error('Invalid Feature App found. The Feature App must be an object with either 1) a `render` method that returns a React element, or 2) an `attachTo` method that accepts a container DOM element.');
                }
                return {
                    featureApp,
                    release,
                    loading: Boolean(featureApp.loadingPromise),
                };
            }
            catch (error) {
                try {
                    (0, exports.handleError)(logger, error, onError);
                }
                catch (handlerError) {
                    return {
                        error: handlerError,
                        loading: false,
                        failedToHandleAsyncError: true,
                    };
                }
                return { error, loading: false };
            }
        }
        return null;
    }
    componentDidCatch(error) {
        this.handleError(error);
        this.setState({ error, loading: false });
    }
    componentDidMount() {
        this.mounted = true;
        this.attachDomFeatureApp();
        this.handleLoading();
    }
    componentDidUpdate() {
        this.attachDomFeatureApp();
        this.handleLoading();
    }
    componentWillUnmount() {
        this.mounted = false;
        if (this.state && this.state.release) {
            try {
                this.state.release();
            }
            catch (error) {
                this.handleError(error);
            }
        }
    }
    render() {
        if ('error' in this.state && this.state.error) {
            if (this.state.failedToHandleAsyncError) {
                throw this.state.error;
            }
            return this.renderError(this.state.error);
        }
        const { children, featureAppId, featureAppName } = this.props;
        if (!this.state.featureApp) {
            return children ? children({ loading: true }) : null;
        }
        const { featureApp, loading } = this.state;
        let featureAppNode;
        if ((0, type_guards_1.isReactFeatureApp)(featureApp)) {
            try {
                featureAppNode = featureApp.render();
            }
            catch (error) {
                this.handleError(error);
                return this.renderError(error);
            }
        }
        else {
            featureAppNode = React.createElement("div", { ref: this.containerRef });
        }
        return (React.createElement(feature_app_context_1.FeatureAppContext.Provider, { value: { featureAppId, featureAppName } }, children ? children({ featureAppNode, loading }) : featureAppNode));
    }
    handleLoading() {
        const { featureApp } = this.state;
        if (featureApp &&
            featureApp.loadingPromise &&
            !this.loadingPromiseHandled) {
            this.loadingPromiseHandled = true;
            featureApp.loadingPromise
                .then(() => {
                if (this.mounted) {
                    this.setState({ loading: false });
                }
            })
                .catch((loadingError) => {
                try {
                    this.handleError(loadingError);
                    if (this.mounted) {
                        this.setState({
                            error: loadingError,
                            failedToHandleAsyncError: false,
                            loading: false,
                        });
                    }
                }
                catch (handlerError) {
                    if (this.mounted) {
                        this.setState({
                            error: handlerError,
                            failedToHandleAsyncError: true,
                            loading: false,
                        });
                    }
                }
            });
        }
    }
    renderError(error) {
        const { children } = this.props;
        return children ? children({ error, loading: false }) : null;
    }
    handleError(error) {
        const { logger, onError } = this.props;
        (0, exports.handleError)(logger, error, onError);
    }
    attachDomFeatureApp() {
        if (this.state.featureApp &&
            !this.domFeatureAppAttached &&
            this.containerRef.current &&
            !('error' in this.state) &&
            (0, type_guards_1.isDomFeatureApp)(this.state.featureApp)) {
            try {
                this.state.featureApp.attachTo(this.containerRef.current);
                this.domFeatureAppAttached = true;
            }
            catch (error) {
                this.componentDidCatch(error);
            }
        }
    }
}
exports.InternalFeatureAppContainer = InternalFeatureAppContainer;
//# sourceMappingURL=internal-feature-app-container.js.map