"use strict";
/**
 * @jest-environment node
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const server_1 = __importDefault(require("react-dom/server"));
const __1 = require("..");
describe('FeatureAppContainer (on Node.js)', () => {
    let mockFeatureAppManager;
    let mockCreateFeatureAppScope;
    let mockFeatureAppDefinition;
    let mockFeatureAppScope;
    let consoleErrorSpy;
    let consoleWarnSpy;
    const expectConsoleErrorCalls = (expectedConsoleErrorCalls) => {
        try {
            expect(consoleErrorSpy.mock.calls).toEqual(expectedConsoleErrorCalls);
        }
        finally {
            consoleErrorSpy.mockClear();
        }
    };
    beforeEach(() => {
        mockFeatureAppDefinition = { create: jest.fn() };
        mockFeatureAppScope = { featureApp: {}, release: jest.fn() };
        mockCreateFeatureAppScope = jest.fn(() => (Object.assign({}, mockFeatureAppScope)));
        mockFeatureAppManager = {
            getAsyncFeatureAppDefinition: jest.fn(),
            createFeatureAppScope: mockCreateFeatureAppScope,
            preloadFeatureApp: jest.fn(),
        };
        consoleErrorSpy = jest.spyOn(console, 'error');
        consoleWarnSpy = jest.spyOn(console, 'warn');
    });
    afterEach(() => {
        expect(consoleErrorSpy).not.toHaveBeenCalled();
        consoleErrorSpy.mockRestore();
        expect(consoleWarnSpy).not.toHaveBeenCalled();
        consoleWarnSpy.mockRestore();
    });
    const renderWithFeatureHubContext = (node) => server_1.default.renderToString(React.createElement(__1.FeatureHubContextProvider, { value: { featureAppManager: mockFeatureAppManager } }, node));
    for (const invalidFeatureApp of [
        undefined,
        null,
        {},
        { attachTo: 'foo' },
        { render: 'foo' },
    ]) {
        describe(`when an invalid Feature App (${JSON.stringify(invalidFeatureApp)}) is created`, () => {
            beforeEach(() => {
                mockFeatureAppScope = {
                    featureApp: invalidFeatureApp,
                    release: jest.fn(),
                };
            });
            it('logs an error', () => {
                const expectedError = new Error('Invalid Feature App found. The Feature App must be an object with either 1) a `render` method that returns a React element, or 2) an `attachTo` method that accepts a container DOM element.');
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition }));
                expectConsoleErrorCalls([[expectedError]]);
            });
        });
    }
    describe('when a Feature App scope fails to be created', () => {
        let mockError;
        beforeEach(() => {
            mockError = new Error('Failed to create Feature App scope.');
            mockCreateFeatureAppScope.mockImplementation(() => {
                throw mockError;
            });
        });
        it('logs an error', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition }));
            expectConsoleErrorCalls([[mockError]]);
        });
    });
    describe('when a Feature App throws in render', () => {
        let mockError;
        beforeEach(() => {
            mockError = new Error('Failed to render.');
            mockFeatureAppScope = Object.assign(Object.assign({}, mockFeatureAppScope), { featureApp: {
                    render: () => {
                        throw mockError;
                    },
                } });
        });
        it('logs the error', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition }));
            expectConsoleErrorCalls([[mockError]]);
        });
    });
    describe('when using a loading promise', () => {
        let resolveLoadingPromise;
        let rejectLoadingPromise;
        beforeEach(() => {
            const loadingPromise = new Promise((resolve, reject) => {
                resolveLoadingPromise = async () => {
                    resolve();
                    // promsise returns itself so we don't forget to await next
                    // async tick in tests
                    return loadingPromise;
                };
                rejectLoadingPromise = async (e) => {
                    reject(e);
                    return loadingPromise.catch(() => undefined);
                };
            });
            mockFeatureAppScope = Object.assign(Object.assign({}, mockFeatureAppScope), { featureApp: {
                    loadingPromise,
                    render: () => 'Rendered a Feature App',
                } });
        });
        it('renders with loading=true, resolved loading promise is ignored', async () => {
            const children = jest.fn(() => null);
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition, children: children }));
            expect(children).toHaveBeenCalledTimes(1);
            expect(children.mock.calls[0]).toMatchObject([{ loading: true }]);
            await resolveLoadingPromise();
            expect(children).toHaveBeenCalledTimes(1);
        });
        it('ignores a rejected loading promise', async () => {
            const children = jest.fn(() => null);
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppContainer, { featureAppId: "testId", featureAppDefinition: mockFeatureAppDefinition, children: children }));
            expect(children).toHaveBeenCalledTimes(1);
            await rejectLoadingPromise();
            expect(children).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=feature-app-container.node.test.js.map