"use strict";
/**
 * @jest-environment jsdom
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-implicit-dependencies
const core_1 = require("@feature-hub/core");
const react_1 = __importDefault(require("react"));
const react_test_renderer_1 = __importDefault(require("react-test-renderer"));
const __1 = require("..");
describe('FeatureAppLoader with an unmocked InternalFeatureAppContainer', () => {
    let mockFeatureAppManager;
    let mockAsyncFeatureAppDefinition;
    let mockAttachTo;
    let consoleErrorSpy;
    beforeEach(() => {
        consoleErrorSpy = jest.spyOn(console, 'error');
        mockAttachTo = jest.fn();
        const domFeatureApp = { attachTo: mockAttachTo };
        const mockFeatureAppDefinition = {
            create: () => domFeatureApp,
        };
        mockAsyncFeatureAppDefinition = new core_1.AsyncValue(new Promise((resolve) => setTimeout(() => resolve(mockFeatureAppDefinition))));
        mockFeatureAppManager = {
            getAsyncFeatureAppDefinition: () => mockAsyncFeatureAppDefinition,
            createFeatureAppScope: () => ({
                featureApp: domFeatureApp,
                release: jest.fn(),
            }),
            preloadFeatureApp: jest.fn(),
        };
    });
    afterEach(() => {
        expect(consoleErrorSpy).not.toHaveBeenCalled();
        consoleErrorSpy.mockRestore();
    });
    const renderWithFeatureHubContext = (node, testRendererOptions) => react_test_renderer_1.default.create(react_1.default.createElement(__1.FeatureHubContextProvider, { value: { featureAppManager: mockFeatureAppManager } }, node), testRendererOptions);
    describe('when a Feature App definition is loaded asynchronously', () => {
        describe('with a children render function', () => {
            describe('and a DOM Feature App', () => {
                it('calls attachTo of the DOM Feature App', async () => {
                    renderWithFeatureHubContext(react_1.default.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }, ({ featureAppNode }) => react_1.default.createElement("div", null, featureAppNode)), { createNodeMock: () => ({}) });
                    await mockAsyncFeatureAppDefinition.promise;
                    expect(mockAttachTo).toHaveBeenCalledTimes(1);
                });
            });
        });
    });
});
//# sourceMappingURL=feature-app-loader-and-container.test.js.map