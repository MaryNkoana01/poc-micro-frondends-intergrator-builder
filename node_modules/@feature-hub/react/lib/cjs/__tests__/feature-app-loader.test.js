"use strict";
/**
 * @jest-environment jsdom
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@feature-hub/core");
const React = __importStar(require("react"));
const react_test_renderer_1 = __importDefault(require("react-test-renderer"));
const __1 = require("..");
const feature_hub_context_1 = require("../feature-hub-context");
const internal_feature_app_container_1 = require("../internal/internal-feature-app-container");
const logger_1 = require("./logger");
const test_error_boundary_1 = require("./test-error-boundary");
jest.mock('../internal/internal-feature-app-container', () => ({
    InternalFeatureAppContainer: jest.fn(() => 'mocked InternalFeatureAppContainer'),
}));
describe('FeatureAppLoader', () => {
    let mockFeatureAppManager;
    let mockGetAsyncFeatureAppDefinition;
    let mockAsyncFeatureAppDefinition;
    let mockAsyncSsrManager;
    let mockAddUrlForHydration;
    let mockAddStylesheetsForSsr;
    let consoleErrorSpy;
    const usingTestErrorBoundaryConsoleErrorCalls = [
        [
            expect.stringContaining('React will try to recreate this component tree from scratch using the error boundary you provided, TestErrorBoundary.'),
        ],
    ];
    const noErrorBoundaryConsoleErrorCalls = [
        [
            expect.stringContaining('Consider adding an error boundary to your tree to customize error handling behavior.'),
        ],
    ];
    const expectConsoleErrorCalls = (expectedConsoleErrorCalls) => {
        try {
            expect(consoleErrorSpy.mock.calls).toEqual(expectedConsoleErrorCalls);
        }
        finally {
            consoleErrorSpy.mockClear();
        }
    };
    beforeAll(() => {
        window.addEventListener('error', (e) => {
            // Prevent JSDOM from messing with the errors. See also:
            // https://github.com/jestjs/jest/issues/5223#issuecomment-355440432
            e.preventDefault();
        });
    });
    beforeEach(() => {
        consoleErrorSpy = jest.spyOn(console, 'error');
        if (document.head) {
            document.head.innerHTML = '';
        }
        mockAsyncFeatureAppDefinition = new core_1.AsyncValue(new Promise(jest.fn()));
        mockGetAsyncFeatureAppDefinition = jest.fn(() => mockAsyncFeatureAppDefinition);
        mockFeatureAppManager = {
            getAsyncFeatureAppDefinition: mockGetAsyncFeatureAppDefinition,
            createFeatureAppScope: jest.fn(),
            preloadFeatureApp: jest.fn(),
        };
        mockAsyncSsrManager = {
            scheduleRerender: jest.fn(),
            renderUntilCompleted: jest.fn(),
        };
        mockAddUrlForHydration = jest.fn();
        mockAddStylesheetsForSsr = jest.fn();
    });
    afterEach(() => {
        expect(consoleErrorSpy).not.toHaveBeenCalled();
        consoleErrorSpy.mockRestore();
    });
    it('throws an error when rendered without a FeatureHubContextProvider', () => {
        expect(() => react_test_renderer_1.default.create(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }))).toThrowError(new Error('No Feature Hub context was provided! There are two possible causes: 1.) No FeatureHubContextProvider was rendered in the React tree. 2.) A Feature App that renders itself a FeatureAppLoader or a FeatureAppContainer did not declare @feature-hub/react as an external package.'));
        expectConsoleErrorCalls(noErrorBoundaryConsoleErrorCalls);
    });
    const renderWithFeatureHubContext = (node, options = {}) => {
        const { customLogger = true, handleError = jest.fn() } = options;
        return react_test_renderer_1.default.create(React.createElement(feature_hub_context_1.FeatureHubContextProvider, { value: {
                featureAppManager: mockFeatureAppManager,
                asyncSsrManager: mockAsyncSsrManager,
                addUrlForHydration: mockAddUrlForHydration,
                addStylesheetsForSsr: mockAddStylesheetsForSsr,
                logger: customLogger ? logger_1.logger : undefined,
            } },
            React.createElement(test_error_boundary_1.TestErrorBoundary, { handleError: handleError }, node)));
    };
    it('throws an error if no src is provided', () => {
        const handleError = jest.fn();
        const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "" }), { handleError });
        expect(handleError.mock.calls).toEqual([[new Error('No src provided.')]]);
        expect(testRenderer.toJSON()).toBe('test error boundary');
        expectConsoleErrorCalls(usingTestErrorBoundaryConsoleErrorCalls);
    });
    describe('when rendering initially', () => {
        describe('when given no children function', () => {
            it('renders nothing', () => {
                const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
                expect(testRenderer.toJSON()).toBeNull();
            });
        });
    });
    describe('without a css prop', () => {
        it('does not change the document head', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
            expect(document.head).toMatchSnapshot();
        });
        it('does not try to add stylesheets for SSR', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
            expect(mockAddStylesheetsForSsr).not.toHaveBeenCalled();
        });
    });
    describe('with a css prop', () => {
        it('appends link elements to the document head', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", css: [
                    { href: 'https://example.com/foo.css' },
                    { href: 'bar.css', media: 'print' },
                ] }));
            expect(document.head).toMatchSnapshot();
        });
        it('does not add the stylesheets for SSR', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", css: [{ href: 'foo.css' }] }));
            expect(mockAddStylesheetsForSsr).not.toHaveBeenCalled();
        });
        describe('when the css has already been appended', () => {
            it('does not append the css a second time', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", css: [{ href: 'foo.css' }] }));
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", css: [{ href: 'foo.css' }] }));
                expect(document.head).toMatchSnapshot();
            });
        });
        describe('and a baseUrl', () => {
            it('appends link elements to the document head', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", baseUrl: "http://feature-hub.io", src: "example.js", css: [
                        { href: 'https://example.com/foo.css' },
                        { href: 'bar.css', media: 'print' },
                    ] }));
                expect(document.head).toMatchSnapshot();
            });
        });
    });
    describe('when a Feature App definition is synchronously available', () => {
        let mockFeatureAppDefinition;
        beforeEach(() => {
            mockFeatureAppDefinition = { create: jest.fn() };
            mockAsyncFeatureAppDefinition = new core_1.AsyncValue(Promise.resolve(mockFeatureAppDefinition));
        });
        it('calls getAsyncFeatureAppDefinition with the given src exactly once', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
            expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                ['example.js', undefined],
            ]);
        });
        describe('with a baseUrl and a relative src', () => {
            it('calls getAsyncFeatureAppDefinition with a prepended src', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", baseUrl: "/base", src: "example.js" }));
                expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                    ['/base/example.js', undefined],
                ]);
            });
        });
        describe('with a baseUrl and an absolute src', () => {
            it('calls getAsyncFeatureAppDefinition with the absolute src', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", baseUrl: "/base", src: "http://example.com/foo.js" }));
                expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                    ['http://example.com/foo.js', undefined],
                ]);
            });
        });
        describe('with a moduleType', () => {
            it('calls getAsyncFeatureAppDefinition with the given src and moduleType', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", moduleType: "a", serverModuleType: "b" }));
                expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                    ['example.js', 'a'],
                ]);
            });
        });
        it('renders an InternalFeatureAppContainer', () => {
            const onError = jest.fn();
            const beforeCreate = jest.fn();
            const done = jest.fn();
            const children = jest.fn();
            const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { src: "example.js", featureAppId: "testId", config: "testConfig", beforeCreate: beforeCreate, done: done, onError: onError, baseUrl: "/base", children: children }));
            expect(testRenderer.toJSON()).toBe('mocked InternalFeatureAppContainer');
            expect(internal_feature_app_container_1.InternalFeatureAppContainer).toHaveBeenCalledWith({
                baseUrl: '/base',
                beforeCreate,
                done,
                config: 'testConfig',
                featureAppDefinition: mockFeatureAppDefinition,
                featureAppId: 'testId',
                onError,
                children,
                featureAppManager: mockFeatureAppManager,
                logger: logger_1.logger,
            }, {});
        });
        it('does not schedule a rerender on the Async SSR Manager', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", serverSrc: "example-node.js" }));
            expect(mockAsyncSsrManager.scheduleRerender).not.toHaveBeenCalled();
        });
        it('does not add a URL for hydration', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", serverSrc: "example-node.js" }));
            expect(mockAddUrlForHydration).not.toHaveBeenCalled();
        });
    });
    describe('when the async Feature App definition synchronously has an error', () => {
        let mockError;
        beforeEach(() => {
            mockError = new Error('Failed to load Feature App module.');
            mockAsyncFeatureAppDefinition = new core_1.AsyncValue(Promise.reject(mockError), undefined, mockError);
        });
        it('renders nothing and logs an error (only once)', async () => {
            const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { src: "example.js", featureAppId: "testId" }));
            try {
                await mockAsyncFeatureAppDefinition.promise;
            }
            catch (error) {
                expect(error).toBe(mockError);
            }
            finally {
                expect(testRenderer.toJSON()).toBeNull();
                expect(logger_1.logger.error.mock.calls).toEqual([
                    [
                        'The Feature App for the src "example.js" and the ID "testId" could not be rendered.',
                        mockError,
                    ],
                ]);
            }
        });
        describe('with onError provided', () => {
            it('calls onError with the error', () => {
                const onError = jest.fn();
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: onError }));
                expect(onError.mock.calls).toEqual([[mockError]]);
            });
            it('does not log the error', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: jest.fn() }));
                expect(logger_1.logger.error).not.toHaveBeenCalled();
            });
            describe('when onError throws an error', () => {
                let onErrorMockError;
                beforeEach(() => {
                    onErrorMockError = new Error('Throwing in onError.');
                });
                it('throws the error in render', () => {
                    const handleError = jest.fn();
                    const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: () => {
                            throw onErrorMockError;
                        } }), { handleError });
                    expect(handleError.mock.calls).toEqual([[onErrorMockError]]);
                    expect(testRenderer.toJSON()).toBe('test error boundary');
                    expectConsoleErrorCalls(usingTestErrorBoundaryConsoleErrorCalls);
                });
            });
        });
        describe('with children function provided', () => {
            it('calls children with error and loading=false', () => {
                const children = jest.fn().mockReturnValue(null);
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", children: children }));
                expect(children.mock.calls).toEqual([
                    [
                        {
                            featureAppNode: undefined,
                            error: mockError,
                            loading: false,
                        },
                    ],
                ]);
            });
            it('renders what children returns', () => {
                const children = jest.fn(() => 'Custom Error UI');
                const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", children: children }));
                expect(testRenderer.toJSON()).toBe('Custom Error UI');
            });
            describe('when children function throws an error', () => {
                let childrenMockError;
                beforeEach(() => {
                    childrenMockError = new Error('Throwing in children.');
                });
                it('throws the error in render', () => {
                    const handleError = jest.fn();
                    const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", children: () => {
                            throw childrenMockError;
                        } }), { handleError });
                    expect(handleError.mock.calls).toEqual([[childrenMockError]]);
                    expect(testRenderer.toJSON()).toBe('test error boundary');
                    expectConsoleErrorCalls(usingTestErrorBoundaryConsoleErrorCalls);
                });
            });
            describe('when onError is also provided', () => {
                it('calls onError with the error', () => {
                    const onError = jest.fn();
                    renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: onError, children: jest.fn().mockReturnValue(null) }));
                    expect(onError.mock.calls).toEqual([[mockError]]);
                });
                describe('and throws an error', () => {
                    let onErrorMockError;
                    beforeEach(() => {
                        onErrorMockError = new Error('Throwing in onError.');
                    });
                    it('does not call children and throws the error in render', () => {
                        const handleError = jest.fn();
                        const children = jest.fn();
                        const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: () => {
                                throw onErrorMockError;
                            }, children: children }), { handleError });
                        expect(children).not.toHaveBeenCalled();
                        expect(handleError.mock.calls).toEqual([[onErrorMockError]]);
                        expect(testRenderer.toJSON()).toBe('test error boundary');
                        expectConsoleErrorCalls(usingTestErrorBoundaryConsoleErrorCalls);
                    });
                });
            });
        });
    });
    describe('when a Feature App definition is loaded asynchronously', () => {
        let mockFeatureAppDefinition;
        beforeEach(() => {
            mockFeatureAppDefinition = { create: jest.fn() };
            mockAsyncFeatureAppDefinition = new core_1.AsyncValue(new Promise((resolve) => 
            // defer to next event loop turn to guarantee asynchronism
            setTimeout(() => resolve(mockFeatureAppDefinition))));
        });
        it('calls getAsyncFeatureAppDefinition with the given src exactly twice', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
            expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                ['example.js', undefined],
                ['example.js', undefined],
            ]);
        });
        describe('with a baseUrl and a relative src', () => {
            it('calls getAsyncFeatureAppDefinition with a prepended src', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", baseUrl: "/base", src: "example.js" }));
                expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                    ['/base/example.js', undefined],
                    ['/base/example.js', undefined],
                ]);
            });
        });
        describe('with a baseUrl and an absolute src', () => {
            it('calls getAsyncFeatureAppDefinition with the absolute src', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", baseUrl: "/base", src: "http://example.com/foo.js" }));
                expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                    ['http://example.com/foo.js', undefined],
                    ['http://example.com/foo.js', undefined],
                ]);
            });
        });
        describe('with a moduleType prop', () => {
            it('calls getAsyncFeatureAppDefinition with the given src and moduleType', () => {
                renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", moduleType: "a", serverModuleType: "b" }));
                expect(mockGetAsyncFeatureAppDefinition.mock.calls).toEqual([
                    ['example.js', 'a'],
                    ['example.js', 'a'],
                ]);
            });
        });
        it('initially renders nothing', () => {
            const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
            expect(testRenderer.toJSON()).toBeNull();
        });
        it('renders a FeatureAppContainer when loaded', async () => {
            const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { src: "example.js", featureAppId: "testId" }));
            await mockAsyncFeatureAppDefinition.promise;
            expect(testRenderer.toJSON()).toBe('mocked InternalFeatureAppContainer');
        });
        it('does not schedule a rerender on the Async SSR Manager', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", serverSrc: "example-node.js" }));
            expect(mockAsyncSsrManager.scheduleRerender).not.toHaveBeenCalled();
        });
        it('does not add a URL for hydration', () => {
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", serverSrc: "example-node.js" }));
            expect(mockAddUrlForHydration).not.toHaveBeenCalled();
        });
        describe('when unmounted before loading has finished', () => {
            it('renders nothing', async () => {
                const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
                testRenderer.unmount();
                await mockAsyncFeatureAppDefinition.promise;
                expect(testRenderer.toJSON()).toBeNull();
            });
        });
    });
    describe('when a Feature App definition fails to load asynchronously', () => {
        let mockError;
        beforeEach(() => {
            mockError = new Error('Failed to load Feature App module.');
            mockAsyncFeatureAppDefinition = new core_1.AsyncValue(new Promise((_, reject) => 
            // defer to next event loop turn to guarantee asynchronism
            setTimeout(() => reject(mockError))));
        });
        it('renders nothing and logs an error', async () => {
            const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { src: "example.js", featureAppId: "testId" }));
            expect.assertions(4); // Note: one of the assertions is in afterEach.
            try {
                await mockAsyncFeatureAppDefinition.promise;
            }
            catch (error) {
                expect(error).toBe(mockError);
            }
            expect(testRenderer.toJSON()).toBeNull();
            expect(logger_1.logger.error.mock.calls).toEqual([
                [
                    'The Feature App for the src "example.js" and the ID "testId" could not be rendered.',
                    mockError,
                ],
            ]);
        });
        describe('with onError provided', () => {
            it('calls onError with the error', async () => {
                const onError = jest.fn();
                try {
                    renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: onError }));
                    await mockAsyncFeatureAppDefinition.promise;
                }
                catch (_a) { }
                expect(onError.mock.calls).toEqual([[mockError]]);
            });
            it('does not log the error', async () => {
                try {
                    renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: jest.fn() }));
                    await mockAsyncFeatureAppDefinition.promise;
                }
                catch (_a) { }
                expect(logger_1.logger.error).not.toHaveBeenCalled();
            });
            describe('when onError throws an error', () => {
                let onErrorMockError;
                beforeEach(() => {
                    onErrorMockError = new Error('Throwing in onError.');
                });
                it('throws the error in render', async () => {
                    const handleError = jest.fn();
                    const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: () => {
                            throw onErrorMockError;
                        } }), { handleError });
                    try {
                        await mockAsyncFeatureAppDefinition.promise;
                    }
                    catch (_a) { }
                    expect(handleError.mock.calls).toEqual([[onErrorMockError]]);
                    expect(testRenderer.toJSON()).toBe('test error boundary');
                    expectConsoleErrorCalls(usingTestErrorBoundaryConsoleErrorCalls);
                });
                describe('when unmounted before loading has finished', () => {
                    it('calls onError with the error', async () => {
                        const onError = jest.fn(() => {
                            throw onErrorMockError;
                        });
                        const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: onError }));
                        testRenderer.unmount();
                        try {
                            await mockAsyncFeatureAppDefinition.promise;
                        }
                        catch (_a) { }
                        expect(onError.mock.calls).toEqual([[mockError]]);
                    });
                    it('renders nothing', async () => {
                        const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js", onError: () => {
                                throw onErrorMockError;
                            } }));
                        testRenderer.unmount();
                        try {
                            await mockAsyncFeatureAppDefinition.promise;
                        }
                        catch (_a) { }
                        expect(testRenderer.toJSON()).toBeNull();
                    });
                });
            });
        });
        describe('when unmounted before loading has finished', () => {
            it('logs an error', async () => {
                const testRenderer = renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { featureAppId: "testId", src: "example.js" }));
                testRenderer.unmount();
                expect.assertions(3); // Note: one of the assertions is in afterEach.
                try {
                    await mockAsyncFeatureAppDefinition.promise;
                }
                catch (error) {
                    expect(error).toBe(mockError);
                }
                expect(logger_1.logger.error.mock.calls).toEqual([
                    [
                        'The Feature App for the src "example.js" and the ID "testId" could not be rendered.',
                        mockError,
                    ],
                ]);
            });
        });
    });
    describe('without a custom logger', () => {
        it('logs messages using the console', () => {
            const mockError = new Error('Failed to load Feature App module.');
            mockAsyncFeatureAppDefinition = new core_1.AsyncValue(Promise.reject(mockError), undefined, mockError);
            renderWithFeatureHubContext(React.createElement(__1.FeatureAppLoader, { src: "example.js", featureAppId: "testId" }), { customLogger: false });
            expectConsoleErrorCalls([
                [
                    'The Feature App for the src "example.js" and the ID "testId" could not be rendered.',
                    mockError,
                ],
            ]);
        });
    });
});
//# sourceMappingURL=feature-app-loader.test.js.map