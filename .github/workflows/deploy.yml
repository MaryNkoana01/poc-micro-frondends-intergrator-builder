name: AzureStaticWebAppDeployment

on:
  push:
    branches:
      - main

env:
  AZURE_LOCATION: "westus2"

jobs:
  deploy-to-azure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 20

      - name: Clear npm cache
        run: npm cache verify

      - name: Install dependencies
        run: npm install

      - name: Build the app
        run: npm run build

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      

      - name: Get Repository Name
        id: repo_name
        run: echo "::set-output name=name::${{ github.event.repository.name }}"

      - name: Create Azure Resource Group
        id: create_resource_group
        run: |
          resourceGroupName="${{ steps.repo_name.outputs.name }}-resource-group"
          az group create \
            --name $resourceGroupName \
            --location ${{ env.AZURE_LOCATION }}
          echo "::set-output name=resource_group_name::$resourceGroupName"

      - name: Upload files to Azure Storage
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage account create --name ${{ steps.repo_name.outputs.name }} --resource-group ${{ steps.create_resource_group.outputs.resource_group_name }} --location ${{ env.AZURE_LOCATION }} --sku Standard_LRS
            az storage container create --account-name ${{ steps.repo_name.outputs.name }} --name ${{ steps.repo_name.outputs.name }}-container --public-access blob
            az storage blob upload-batch --account-name ${{ steps.repo_name.outputs.name }} --destination ${{ steps.repo_name.outputs.name }}-container --source dist --output none --set-permission blob

      - name: Configure CDN Endpoint
        uses: Azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az cdn profile create -n ${{ steps.repo_name.outputs.name }}-cdn-profile -g ${{ steps.create_resource_group.outputs.resource_group_name }} --sku Standard_Microsoft
            az cdn endpoint create -n ${{ steps.repo_name.outputs.name }}-cdn-endpoint -g ${{ steps.create_resource_group.outputs.resource_group_name }} --profile-name ${{ steps.repo_name.outputs.name }}-cdn-profile --origin ${{ steps.repo_name.outputs.name }}.blob.core.windows.net --origin-host-header ${{ steps.repo_name.outputs.name }}.blob.core.windows.net

      - name: Check CDN Endpoint Provisioning Status
        id: check_cdn_status
        run: |
          while true; do
            status=$(az cdn endpoint show -n ${{ steps.repo_name.outputs.name }}-cdn-endpoint -g ${{ steps.create_resource_group.outputs.resource_group_name }} --query 'properties.provisioningState' -o tsv)
            if [ "$status" == "Succeeded" ]; then
              break
            fi
            sleep 10
          done
          echo "CDN Endpoint provisioned successfully."

      - name: Get CDN Endpoint URL
        id: get_cdn_url
        run: |
          cdn_url=$(az cdn endpoint show -n ${{ steps.repo_name.outputs.name }}-cdn-endpoint -g ${{ steps.create_resource_group.outputs.resource_group_name }} --query 'hostName' -o tsv)
          echo "::set-output name=cdn_url::$cdn_url"
          echo "CDN Endpoint URL: $cdn_url"

      - name: Update index.html URLs
        run: |
          cd dist && sed -i "s|http://127.0.0.1:5500/dist/|${{ steps.get_cdn_url.outputs.cdn_url }}/|g" index.html

      - name: Test Deployment
        run: |
          echo "Wait for the CDN endpoint to finish provisioning..."
          echo "Once provisioned, you can access your microfrontend using the CDN endpoint URL: ${{ steps.get_cdn_url.outputs.cdn_url }}"
